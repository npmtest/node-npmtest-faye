{"/home/travis/build/npmtest/node-npmtest-faye/test.js":"/* istanbul instrument in package npmtest_faye */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-faye/lib.npmtest_faye.js":"/* istanbul instrument in package npmtest_faye */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_faye = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_faye = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-faye/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-faye && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_faye */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_faye\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_faye.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_faye.rollup.js'] =\n            local.assetsDict['/assets.npmtest_faye.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_faye.__dirname + '/lib.npmtest_faye.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/faye_node.js":"'use strict';\n\nvar constants = require('./util/constants'),\n    Logging   = require('./mixins/logging');\n\nvar Faye = {\n  VERSION:      constants.VERSION,\n\n  Client:       require('./protocol/client'),\n  Scheduler:    require('./protocol/scheduler'),\n  NodeAdapter:  require('./adapters/node_adapter')\n};\n\nLogging.wrapper = Faye;\n\nmodule.exports = Faye;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/constants.js":"module.exports = {\n  VERSION:          '1.2.4',\n\n  BAYEUX_VERSION:   '1.0',\n  ID_LENGTH:        160,\n  JSONP_CALLBACK:   'jsonpcallback',\n  CONNECTION_TYPES: ['long-polling', 'cross-origin-long-polling', 'callback-polling', 'websocket', 'eventsource', 'in-process'],\n\n  MANDATORY_CONNECTION_TYPES: ['long-polling', 'callback-polling', 'in-process']\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/mixins/logging.js":"'use strict';\n\nvar toJSON = require('../util/to_json');\n\nvar Logging = {\n  LOG_LEVELS: {\n    fatal:  4,\n    error:  3,\n    warn:   2,\n    info:   1,\n    debug:  0\n  },\n\n  writeLog: function(messageArgs, level) {\n    var logger = Logging.logger || (Logging.wrapper || Logging).logger;\n    if (!logger) return;\n\n    var args   = Array.prototype.slice.apply(messageArgs),\n        banner = '[Faye',\n        klass  = this.className,\n\n        message = args.shift().replace(/\\?/g, function() {\n          try {\n            return toJSON(args.shift());\n          } catch (error) {\n            return '[Object]';\n          }\n        });\n\n    if (klass) banner += '.' + klass;\n    banner += '] ';\n\n    if (typeof logger[level] === 'function')\n      logger[level](banner + message);\n    else if (typeof logger === 'function')\n      logger(banner + message);\n  }\n};\n\nfor (var key in Logging.LOG_LEVELS)\n  (function(level) {\n    Logging[level] = function() {\n      this.writeLog(arguments, level);\n    };\n  })(key);\n\nmodule.exports = Logging;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/to_json.js":"'use strict';\n\n// http://assanka.net/content/tech/2009/09/02/json2-js-vs-prototype/\n\nmodule.exports = function(object) {\n  return JSON.stringify(object, function(key, value) {\n    return (this[key] instanceof Array) ? this[key] : value;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/client.js":"'use strict';\n\nvar asap            = require('asap'),\n    Class           = require('../util/class'),\n    Promise         = require('../util/promise'),\n    URI             = require('../util/uri'),\n    array           = require('../util/array'),\n    browser         = require('../util/browser'),\n    constants       = require('../util/constants'),\n    extend          = require('../util/extend'),\n    validateOptions = require('../util/validate_options'),\n    Deferrable      = require('../mixins/deferrable'),\n    Logging         = require('../mixins/logging'),\n    Publisher       = require('../mixins/publisher'),\n    Channel         = require('./channel'),\n    Dispatcher      = require('./dispatcher'),\n    Error           = require('./error'),\n    Extensible      = require('./extensible'),\n    Publication     = require('./publication'),\n    Subscription    = require('./subscription');\n\nvar Client = Class({ className: 'Client',\n  UNCONNECTED:        1,\n  CONNECTING:         2,\n  CONNECTED:          3,\n  DISCONNECTED:       4,\n\n  HANDSHAKE:          'handshake',\n  RETRY:              'retry',\n  NONE:               'none',\n\n  CONNECTION_TIMEOUT: 60,\n\n  DEFAULT_ENDPOINT:   '/bayeux',\n  INTERVAL:           0,\n\n  initialize: function(endpoint, options) {\n    this.info('New client created for ?', endpoint);\n    options = options || {};\n\n    validateOptions(options, ['interval', 'timeout', 'endpoints', 'proxy', 'retry', 'scheduler', 'websocketExtensions', 'tls', 'ca']);\n\n    this._channels   = new Channel.Set();\n    this._dispatcher = Dispatcher.create(this, endpoint || this.DEFAULT_ENDPOINT, options);\n\n    this._messageId = 0;\n    this._state     = this.UNCONNECTED;\n\n    this._responseCallbacks = {};\n\n    this._advice = {\n      reconnect: this.RETRY,\n      interval:  1000 * (options.interval || this.INTERVAL),\n      timeout:   1000 * (options.timeout  || this.CONNECTION_TIMEOUT)\n    };\n    this._dispatcher.timeout = this._advice.timeout / 1000;\n\n    this._dispatcher.bind('message', this._receiveMessage, this);\n\n    if (browser.Event && global.onbeforeunload !== undefined)\n      browser.Event.on(global, 'beforeunload', function() {\n        if (array.indexOf(this._dispatcher._disabled, 'autodisconnect') < 0)\n          this.disconnect();\n      }, this);\n  },\n\n  addWebsocketExtension: function(extension) {\n    return this._dispatcher.addWebsocketExtension(extension);\n  },\n\n  disable: function(feature) {\n    return this._dispatcher.disable(feature);\n  },\n\n  setHeader: function(name, value) {\n    return this._dispatcher.setHeader(name, value);\n  },\n\n  // Request\n  // MUST include:  * channel\n  //                * version\n  //                * supportedConnectionTypes\n  // MAY include:   * minimumVersion\n  //                * ext\n  //                * id\n  //\n  // Success Response                             Failed Response\n  // MUST include:  * channel                     MUST include:  * channel\n  //                * version                                    * successful\n  //                * supportedConnectionTypes                   * error\n  //                * clientId                    MAY include:   * supportedConnectionTypes\n  //                * successful                                 * advice\n  // MAY include:   * minimumVersion                             * version\n  //                * advice                                     * minimumVersion\n  //                * ext                                        * ext\n  //                * id                                         * id\n  //                * authSuccessful\n  handshake: function(callback, context) {\n    if (this._advice.reconnect === this.NONE) return;\n    if (this._state !== this.UNCONNECTED) return;\n\n    this._state = this.CONNECTING;\n    var self = this;\n\n    this.info('Initiating handshake with ?', URI.stringify(this._dispatcher.endpoint));\n    this._dispatcher.selectTransport(constants.MANDATORY_CONNECTION_TYPES);\n\n    this._sendMessage({\n      channel:                  Channel.HANDSHAKE,\n      version:                  constants.BAYEUX_VERSION,\n      supportedConnectionTypes: this._dispatcher.getConnectionTypes()\n\n    }, {}, function(response) {\n\n      if (response.successful) {\n        this._state = this.CONNECTED;\n        this._dispatcher.clientId  = response.clientId;\n\n        this._dispatcher.selectTransport(response.supportedConnectionTypes);\n\n        this.info('Handshake successful: ?', this._dispatcher.clientId);\n\n        this.subscribe(this._channels.getKeys(), true);\n        if (callback) asap(function() { callback.call(context) });\n\n      } else {\n        this.info('Handshake unsuccessful');\n        global.setTimeout(function() { self.handshake(callback, context) }, this._dispatcher.retry * 1000);\n        this._state = this.UNCONNECTED;\n      }\n    }, this);\n  },\n\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * connectionType                     * clientId\n  // MAY include:   * ext                 MAY include:   * error\n  //                * id                                 * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  connect: function(callback, context) {\n    if (this._advice.reconnect === this.NONE) return;\n    if (this._state === this.DISCONNECTED) return;\n\n    if (this._state === this.UNCONNECTED)\n      return this.handshake(function() { this.connect(callback, context) }, this);\n\n    this.callback(callback, context);\n    if (this._state !== this.CONNECTED) return;\n\n    this.info('Calling deferred actions for ?', this._dispatcher.clientId);\n    this.setDeferredStatus('succeeded');\n    this.setDeferredStatus('unknown');\n\n    if (this._connectRequest) return;\n    this._connectRequest = true;\n\n    this.info('Initiating connection for ?', this._dispatcher.clientId);\n\n    this._sendMessage({\n      channel:        Channel.CONNECT,\n      clientId:       this._dispatcher.clientId,\n      connectionType: this._dispatcher.connectionType\n\n    }, {}, this._cycleConnection, this);\n  },\n\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  // MAY include:   * ext                                * clientId\n  //                * id                  MAY include:   * error\n  //                                                     * ext\n  //                                                     * id\n  disconnect: function() {\n    if (this._state !== this.CONNECTED) return;\n    this._state = this.DISCONNECTED;\n\n    this.info('Disconnecting ?', this._dispatcher.clientId);\n    var promise = new Publication();\n\n    this._sendMessage({\n      channel:  Channel.DISCONNECT,\n      clientId: this._dispatcher.clientId\n\n    }, {}, function(response) {\n      if (response.successful) {\n        this._dispatcher.close();\n        promise.setDeferredStatus('succeeded');\n      } else {\n        promise.setDeferredStatus('failed', Error.parse(response.error));\n      }\n    }, this);\n\n    this.info('Clearing channel listeners for ?', this._dispatcher.clientId);\n    this._channels = new Channel.Set();\n\n    return promise;\n  },\n\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * subscription                       * clientId\n  // MAY include:   * ext                                * subscription\n  //                * id                  MAY include:   * error\n  //                                                     * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  subscribe: function(channel, callback, context) {\n    if (channel instanceof Array)\n      return array.map(channel, function(c) {\n        return this.subscribe(c, callback, context);\n      }, this);\n\n    var subscription = new Subscription(this, channel, callback, context),\n        force        = (callback === true),\n        hasSubscribe = this._channels.hasSubscription(channel);\n\n    if (hasSubscribe && !force) {\n      this._channels.subscribe([channel], subscription);\n      subscription.setDeferredStatus('succeeded');\n      return subscription;\n    }\n\n    this.connect(function() {\n      this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel);\n      if (!force) this._channels.subscribe([channel], subscription);\n\n      this._sendMessage({\n        channel:      Channel.SUBSCRIBE,\n        clientId:     this._dispatcher.clientId,\n        subscription: channel\n\n      }, {}, function(response) {\n        if (!response.successful) {\n          subscription.setDeferredStatus('failed', Error.parse(response.error));\n          return this._channels.unsubscribe(channel, subscription);\n        }\n\n        var channels = [].concat(response.subscription);\n        this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);\n        subscription.setDeferredStatus('succeeded');\n      }, this);\n    }, this);\n\n    return subscription;\n  },\n\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * clientId                           * successful\n  //                * subscription                       * clientId\n  // MAY include:   * ext                                * subscription\n  //                * id                  MAY include:   * error\n  //                                                     * advice\n  //                                                     * ext\n  //                                                     * id\n  //                                                     * timestamp\n  unsubscribe: function(channel, subscription) {\n    if (channel instanceof Array)\n      return array.map(channel, function(c) {\n        return this.unsubscribe(c, subscription);\n      }, this);\n\n    var dead = this._channels.unsubscribe(channel, subscription);\n    if (!dead) return;\n\n    this.connect(function() {\n      this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel);\n\n      this._sendMessage({\n        channel:      Channel.UNSUBSCRIBE,\n        clientId:     this._dispatcher.clientId,\n        subscription: channel\n\n      }, {}, function(response) {\n        if (!response.successful) return;\n\n        var channels = [].concat(response.subscription);\n        this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);\n      }, this);\n    }, this);\n  },\n\n  // Request                              Response\n  // MUST include:  * channel             MUST include:  * channel\n  //                * data                               * successful\n  // MAY include:   * clientId            MAY include:   * id\n  //                * id                                 * error\n  //                * ext                                * ext\n  publish: function(channel, data, options) {\n    validateOptions(options || {}, ['attempts', 'deadline']);\n    var publication = new Publication();\n\n    this.connect(function() {\n      this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);\n\n      this._sendMessage({\n        channel:  channel,\n        data:     data,\n        clientId: this._dispatcher.clientId\n\n      }, options, function(response) {\n        if (response.successful)\n          publication.setDeferredStatus('succeeded');\n        else\n          publication.setDeferredStatus('failed', Error.parse(response.error));\n      }, this);\n    }, this);\n\n    return publication;\n  },\n\n  _sendMessage: function(message, options, callback, context) {\n    message.id = this._generateMessageId();\n\n    var timeout = this._advice.timeout\n                ? 1.2 * this._advice.timeout / 1000\n                : 1.2 * this._dispatcher.retry;\n\n    this.pipeThroughExtensions('outgoing', message, null, function(message) {\n      if (!message) return;\n      if (callback) this._responseCallbacks[message.id] = [callback, context];\n      this._dispatcher.sendMessage(message, timeout, options || {});\n    }, this);\n  },\n\n  _generateMessageId: function() {\n    this._messageId += 1;\n    if (this._messageId >= Math.pow(2,32)) this._messageId = 0;\n    return this._messageId.toString(36);\n  },\n\n  _receiveMessage: function(message) {\n    var id = message.id, callback;\n\n    if (message.successful !== undefined) {\n      callback = this._responseCallbacks[id];\n      delete this._responseCallbacks[id];\n    }\n\n    this.pipeThroughExtensions('incoming', message, null, function(message) {\n      if (!message) return;\n      if (message.advice) this._handleAdvice(message.advice);\n      this._deliverMessage(message);\n      if (callback) callback[0].call(callback[1], message);\n    }, this);\n  },\n\n  _handleAdvice: function(advice) {\n    extend(this._advice, advice);\n    this._dispatcher.timeout = this._advice.timeout / 1000;\n\n    if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {\n      this._state = this.UNCONNECTED;\n      this._dispatcher.clientId = null;\n      this._cycleConnection();\n    }\n  },\n\n  _deliverMessage: function(message) {\n    if (!message.channel || message.data === undefined) return;\n    this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);\n    this._channels.distributeMessage(message);\n  },\n\n  _cycleConnection: function() {\n    if (this._connectRequest) {\n      this._connectRequest = null;\n      this.info('Closed connection for ?', this._dispatcher.clientId);\n    }\n    var self = this;\n    global.setTimeout(function() { self.connect() }, this._advice.interval);\n  }\n});\n\nextend(Client.prototype, Deferrable);\nextend(Client.prototype, Publisher);\nextend(Client.prototype, Logging);\nextend(Client.prototype, Extensible);\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/class.js":"'use strict';\n\nvar extend = require('./extend');\n\nmodule.exports = function(parent, methods) {\n  if (typeof parent !== 'function') {\n    methods = parent;\n    parent  = Object;\n  }\n\n  var klass = function() {\n    if (!this.initialize) return this;\n    return this.initialize.apply(this, arguments) || this;\n  };\n\n  var bridge = function() {};\n  bridge.prototype = parent.prototype;\n\n  klass.prototype = new bridge();\n  extend(klass.prototype, methods);\n\n  return klass;\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/extend.js":"'use strict';\n\nmodule.exports = function(dest, source, overwrite) {\n  if (!source) return dest;\n  for (var key in source) {\n    if (!source.hasOwnProperty(key)) continue;\n    if (dest.hasOwnProperty(key) && overwrite === false) continue;\n    if (dest[key] !== source[key])\n      dest[key] = source[key];\n  }\n  return dest;\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/promise.js":"'use strict';\n\nvar asap = require('asap');\n\nvar PENDING   = 0,\n    FULFILLED = 1,\n    REJECTED  = 2;\n\nvar RETURN = function(x) { return x },\n    THROW  = function(x) { throw  x };\n\nvar Promise = function(task) {\n  this._state       = PENDING;\n  this._onFulfilled = [];\n  this._onRejected  = [];\n\n  if (typeof task !== 'function') return;\n  var self = this;\n\n  task(function(value)  { resolve(self, value) },\n       function(reason) { reject(self, reason) });\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var next = new Promise();\n  registerOnFulfilled(this, onFulfilled, next);\n  registerOnRejected(this, onRejected, next);\n  return next;\n};\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nvar registerOnFulfilled = function(promise, onFulfilled, next) {\n  if (typeof onFulfilled !== 'function') onFulfilled = RETURN;\n  var handler = function(value) { invoke(onFulfilled, value, next) };\n\n  if (promise._state === PENDING) {\n    promise._onFulfilled.push(handler);\n  } else if (promise._state === FULFILLED) {\n    handler(promise._value);\n  }\n};\n\nvar registerOnRejected = function(promise, onRejected, next) {\n  if (typeof onRejected !== 'function') onRejected = THROW;\n  var handler = function(reason) { invoke(onRejected, reason, next) };\n\n  if (promise._state === PENDING) {\n    promise._onRejected.push(handler);\n  } else if (promise._state === REJECTED) {\n    handler(promise._reason);\n  }\n};\n\nvar invoke = function(fn, value, next) {\n  asap(function() { _invoke(fn, value, next) });\n};\n\nvar _invoke = function(fn, value, next) {\n  var outcome;\n\n  try {\n    outcome = fn(value);\n  } catch (error) {\n    return reject(next, error);\n  }\n\n  if (outcome === next) {\n    reject(next, new TypeError('Recursive promise chain detected'));\n  } else {\n    resolve(next, outcome);\n  }\n};\n\nvar resolve = function(promise, value) {\n  var called = false, type, then;\n\n  try {\n    type = typeof value;\n    then = value !== null && (type === 'function' || type === 'object') && value.then;\n\n    if (typeof then !== 'function') return fulfill(promise, value);\n\n    then.call(value, function(v) {\n      if (!(called ^ (called = true))) return;\n      resolve(promise, v);\n    }, function(r) {\n      if (!(called ^ (called = true))) return;\n      reject(promise, r);\n    });\n  } catch (error) {\n    if (!(called ^ (called = true))) return;\n    reject(promise, error);\n  }\n};\n\nvar fulfill = function(promise, value) {\n  if (promise._state !== PENDING) return;\n\n  promise._state      = FULFILLED;\n  promise._value      = value;\n  promise._onRejected = [];\n\n  var onFulfilled = promise._onFulfilled, fn;\n  while (fn = onFulfilled.shift()) fn(value);\n};\n\nvar reject = function(promise, reason) {\n  if (promise._state !== PENDING) return;\n\n  promise._state       = REJECTED;\n  promise._reason      = reason;\n  promise._onFulfilled = [];\n\n  var onRejected = promise._onRejected, fn;\n  while (fn = onRejected.shift()) fn(reason);\n};\n\nPromise.resolve = function(value) {\n  return new Promise(function(resolve, reject) { resolve(value) });\n};\n\nPromise.reject = function(reason) {\n  return new Promise(function(resolve, reject) { reject(reason) });\n};\n\nPromise.all = function(promises) {\n  return new Promise(function(resolve, reject) {\n    var list = [], n = promises.length, i;\n\n    if (n === 0) return resolve(list);\n\n    for (i = 0; i < n; i++) (function(promise, i) {\n      Promise.resolve(promise).then(function(value) {\n        list[i] = value;\n        if (--n === 0) resolve(list);\n      }, reject);\n    })(promises[i], i);\n  });\n};\n\nPromise.race = function(promises) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, n = promises.length; i < n; i++)\n      Promise.resolve(promises[i]).then(resolve, reject);\n  });\n};\n\nPromise.deferred = Promise.pending = function() {\n  var tuple = {};\n\n  tuple.promise = new Promise(function(resolve, reject) {\n    tuple.resolve = resolve;\n    tuple.reject  = reject;\n  });\n  return tuple;\n};\n\nmodule.exports = Promise;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/uri.js":"'use strict';\n\nmodule.exports = {\n  isURI: function(uri) {\n    return uri && uri.protocol && uri.host && uri.path;\n  },\n\n  isSameOrigin: function(uri) {\n    return uri.protocol === location.protocol &&\n           uri.hostname === location.hostname &&\n           uri.port     === location.port;\n  },\n\n  parse: function(url) {\n    if (typeof url !== 'string') return url;\n    var uri = {}, parts, query, pairs, i, n, data;\n\n    var consume = function(name, pattern) {\n      url = url.replace(pattern, function(match) {\n        uri[name] = match;\n        return '';\n      });\n      uri[name] = uri[name] || '';\n    };\n\n    consume('protocol', /^[a-z]+\\:/i);\n    consume('host',     /^\\/\\/[^\\/\\?#]+/);\n\n    if (!/^\\//.test(url) && !uri.host)\n      url = location.pathname.replace(/[^\\/]*$/, '') + url;\n\n    consume('pathname', /^[^\\?#]*/);\n    consume('search',   /^\\?[^#]*/);\n    consume('hash',     /^#.*/);\n\n    uri.protocol = uri.protocol || location.protocol;\n\n    if (uri.host) {\n      uri.host     = uri.host.substr(2);\n      parts        = uri.host.split(':');\n      uri.hostname = parts[0];\n      uri.port     = parts[1] || '';\n    } else {\n      uri.host     = location.host;\n      uri.hostname = location.hostname;\n      uri.port     = location.port;\n    }\n\n    uri.pathname = uri.pathname || '/';\n    uri.path = uri.pathname + uri.search;\n\n    query = uri.search.replace(/^\\?/, '');\n    pairs = query ? query.split('&') : [];\n    data  = {};\n\n    for (i = 0, n = pairs.length; i < n; i++) {\n      parts = pairs[i].split('=');\n      data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');\n    }\n\n    uri.query = data;\n\n    uri.href = this.stringify(uri);\n    return uri;\n  },\n\n  stringify: function(uri) {\n    var string = uri.protocol + '//' + uri.hostname;\n    if (uri.port) string += ':' + uri.port;\n    string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');\n    return string;\n  },\n\n  queryString: function(query) {\n    var pairs = [];\n    for (var key in query) {\n      if (!query.hasOwnProperty(key)) continue;\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));\n    }\n    if (pairs.length === 0) return '';\n    return '?' + pairs.join('&');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/array.js":"'use strict';\n\nmodule.exports = {\n  commonElement: function(lista, listb) {\n    for (var i = 0, n = lista.length; i < n; i++) {\n      if (this.indexOf(listb, lista[i]) !== -1)\n        return lista[i];\n    }\n    return null;\n  },\n\n  indexOf: function(list, needle) {\n    if (list.indexOf) return list.indexOf(needle);\n\n    for (var i = 0, n = list.length; i < n; i++) {\n      if (list[i] === needle) return i;\n    }\n    return -1;\n  },\n\n  map: function(object, callback, context) {\n    if (object.map) return object.map(callback, context);\n    var result = [];\n\n    if (object instanceof Array) {\n      for (var i = 0, n = object.length; i < n; i++) {\n        result.push(callback.call(context || null, object[i], i));\n      }\n    } else {\n      for (var key in object) {\n        if (!object.hasOwnProperty(key)) continue;\n        result.push(callback.call(context || null, key, object[key]));\n      }\n    }\n    return result;\n  },\n\n  filter: function(array, callback, context) {\n    if (array.filter) return array.filter(callback, context);\n    var result = [];\n    for (var i = 0, n = array.length; i < n; i++) {\n      if (callback.call(context || null, array[i], i))\n        result.push(array[i]);\n    }\n    return result;\n  },\n\n  asyncEach: function(list, iterator, callback, context) {\n    var n       = list.length,\n        i       = -1,\n        calls   = 0,\n        looping = false;\n\n    var iterate = function() {\n      calls -= 1;\n      i += 1;\n      if (i === n) return callback && callback.call(context);\n      iterator(list[i], resume);\n    };\n\n    var loop = function() {\n      if (looping) return;\n      looping = true;\n      while (calls > 0) iterate();\n      looping = false;\n    };\n\n    var resume = function() {\n      calls += 1;\n      loop();\n    };\n    resume();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/browser/node_shim.js":"'use strict';\n\nmodule.exports = {};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/validate_options.js":"'use strict';\n\nvar array = require('./array');\n\nmodule.exports = function(options, validKeys) {\n  for (var key in options) {\n    if (array.indexOf(validKeys, key) < 0)\n      throw new Error('Unrecognized option: ' + key);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/mixins/deferrable.js":"'use strict';\n\nvar Promise   = require('../util/promise');\n\nmodule.exports = {\n  then: function(callback, errback) {\n    var self = this;\n    if (!this._promise)\n      this._promise = new Promise(function(resolve, reject) {\n        self._resolve = resolve;\n        self._reject  = reject;\n      });\n\n    if (arguments.length === 0)\n      return this._promise;\n    else\n      return this._promise.then(callback, errback);\n  },\n\n  callback: function(callback, context) {\n    return this.then(function(value) { callback.call(context, value) });\n  },\n\n  errback: function(callback, context) {\n    return this.then(null, function(reason) { callback.call(context, reason) });\n  },\n\n  timeout: function(seconds, message) {\n    this.then();\n    var self = this;\n    this._timer = global.setTimeout(function() {\n      self._reject(message);\n    }, seconds * 1000);\n  },\n\n  setDeferredStatus: function(status, value) {\n    if (this._timer) global.clearTimeout(this._timer);\n\n    this.then();\n\n    if (status === 'succeeded')\n      this._resolve(value);\n    else if (status === 'failed')\n      this._reject(value);\n    else\n      delete this._promise;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/mixins/publisher.js":"'use strict';\n\nvar extend       = require('../util/extend'),\n    EventEmitter = require('../util/event_emitter');\n\nvar Publisher = {\n  countListeners: function(eventType) {\n    return this.listeners(eventType).length;\n  },\n\n  bind: function(eventType, listener, context) {\n    var slice   = Array.prototype.slice,\n        handler = function() { listener.apply(context, slice.call(arguments)) };\n\n    this._listeners = this._listeners || [];\n    this._listeners.push([eventType, listener, context, handler]);\n    return this.on(eventType, handler);\n  },\n\n  unbind: function(eventType, listener, context) {\n    this._listeners = this._listeners || [];\n    var n = this._listeners.length, tuple;\n\n    while (n--) {\n      tuple = this._listeners[n];\n      if (tuple[0] !== eventType) continue;\n      if (listener && (tuple[1] !== listener || tuple[2] !== context)) continue;\n      this._listeners.splice(n, 1);\n      this.removeListener(eventType, tuple[3]);\n    }\n  }\n};\n\nextend(Publisher, EventEmitter.prototype);\nPublisher.trigger = Publisher.emit;\n\nmodule.exports = Publisher;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/event_emitter.js":"/*\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvar isArray = typeof Array.isArray === 'function'\n    ? Array.isArray\n    : function (xs) {\n        return Object.prototype.toString.call(xs) === '[object Array]'\n    }\n;\nfunction indexOf (xs, x) {\n    if (xs.indexOf) return xs.indexOf(x);\n    for (var i = 0; i < xs.length; i++) {\n        if (x === xs[i]) return i;\n    }\n    return -1;\n}\n\nfunction EventEmitter() {}\nmodule.exports = EventEmitter;\n\nEventEmitter.prototype.emit = function(type) {\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n      return false;\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler == 'function') {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        var args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  var self = this;\n  self.on(type, function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  });\n\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var i = indexOf(list, listener);\n    if (i < 0) return this;\n    list.splice(i, 1);\n    if (list.length == 0)\n      delete this._events[type];\n  } else if (this._events[type] === listener) {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  if (arguments.length === 0) {\n    this._events = {};\n    return this;\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/channel.js":"'use strict';\n\nvar Class     = require('../util/class'),\n    extend    = require('../util/extend'),\n    Publisher = require('../mixins/publisher'),\n    Grammar   = require('./grammar');\n\nvar Channel = Class({\n  initialize: function(name) {\n    this.id = this.name = name;\n  },\n\n  push: function(message) {\n    this.trigger('message', message);\n  },\n\n  isUnused: function() {\n    return this.countListeners('message') === 0;\n  }\n});\n\nextend(Channel.prototype, Publisher);\n\nextend(Channel, {\n  HANDSHAKE:    '/meta/handshake',\n  CONNECT:      '/meta/connect',\n  SUBSCRIBE:    '/meta/subscribe',\n  UNSUBSCRIBE:  '/meta/unsubscribe',\n  DISCONNECT:   '/meta/disconnect',\n\n  META:         'meta',\n  SERVICE:      'service',\n\n  expand: function(name) {\n    var segments = this.parse(name),\n        channels = ['/**', name];\n\n    var copy = segments.slice();\n    copy[copy.length - 1] = '*';\n    channels.push(this.unparse(copy));\n\n    for (var i = 1, n = segments.length; i < n; i++) {\n      copy = segments.slice(0, i);\n      copy.push('**');\n      channels.push(this.unparse(copy));\n    }\n\n    return channels;\n  },\n\n  isValid: function(name) {\n    return Grammar.CHANNEL_NAME.test(name) ||\n           Grammar.CHANNEL_PATTERN.test(name);\n  },\n\n  parse: function(name) {\n    if (!this.isValid(name)) return null;\n    return name.split('/').slice(1);\n  },\n\n  unparse: function(segments) {\n    return '/' + segments.join('/');\n  },\n\n  isMeta: function(name) {\n    var segments = this.parse(name);\n    return segments ? (segments[0] === this.META) : null;\n  },\n\n  isService: function(name) {\n    var segments = this.parse(name);\n    return segments ? (segments[0] === this.SERVICE) : null;\n  },\n\n  isSubscribable: function(name) {\n    if (!this.isValid(name)) return null;\n    return !this.isMeta(name) && !this.isService(name);\n  },\n\n  Set: Class({\n    initialize: function() {\n      this._channels = {};\n    },\n\n    getKeys: function() {\n      var keys = [];\n      for (var key in this._channels) keys.push(key);\n      return keys;\n    },\n\n    remove: function(name) {\n      delete this._channels[name];\n    },\n\n    hasSubscription: function(name) {\n      return this._channels.hasOwnProperty(name);\n    },\n\n    subscribe: function(names, subscription) {\n      var name;\n      for (var i = 0, n = names.length; i < n; i++) {\n        name = names[i];\n        var channel = this._channels[name] = this._channels[name] || new Channel(name);\n        channel.bind('message', subscription);\n      }\n    },\n\n    unsubscribe: function(name, subscription) {\n      var channel = this._channels[name];\n      if (!channel) return false;\n      channel.unbind('message', subscription);\n\n      if (channel.isUnused()) {\n        this.remove(name);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    distributeMessage: function(message) {\n      var channels = Channel.expand(message.channel);\n\n      for (var i = 0, n = channels.length; i < n; i++) {\n        var channel = this._channels[channels[i]];\n        if (channel) channel.trigger('message', message);\n      }\n    }\n  })\n});\n\nmodule.exports = Channel;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/grammar.js":"'use strict';\n\nmodule.exports = {\n  CHANNEL_NAME:     /^\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+(\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+)*$/,\n  CHANNEL_PATTERN:  /^(\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+)*\\/\\*{1,2}$/,\n  ERROR:            /^([0-9][0-9][0-9]:(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*(,(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*)*:(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*|[0-9][0-9][0-9]::(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*)$/,\n  VERSION:          /^([0-9])+(\\.(([a-z]|[A-Z])|[0-9])(((([a-z]|[A-Z])|[0-9])|\\-|\\_))*)*$/\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/dispatcher.js":"'use strict';\n\nvar Class     = require('../util/class'),\n    URI       = require('../util/uri'),\n    cookies   = require('../util/cookies'),\n    extend    = require('../util/extend'),\n    Logging   = require('../mixins/logging'),\n    Publisher = require('../mixins/publisher'),\n    Transport = require('../transport'),\n    Scheduler = require('./scheduler');\n\nvar Dispatcher = Class({ className: 'Dispatcher',\n  MAX_REQUEST_SIZE: 2048,\n  DEFAULT_RETRY:    5,\n\n  UP:   1,\n  DOWN: 2,\n\n  initialize: function(client, endpoint, options) {\n    this._client     = client;\n    this.endpoint    = URI.parse(endpoint);\n    this._alternates = options.endpoints || {};\n\n    this.cookies      = cookies.CookieJar && new cookies.CookieJar();\n    this._disabled    = [];\n    this._envelopes   = {};\n    this.headers      = {};\n    this.retry        = options.retry || this.DEFAULT_RETRY;\n    this._scheduler   = options.scheduler || Scheduler;\n    this._state       = 0;\n    this.transports   = {};\n    this.wsExtensions = [];\n\n    this.proxy = options.proxy || {};\n    if (typeof this._proxy === 'string') this._proxy = {origin: this._proxy};\n\n    var exts = options.websocketExtensions;\n    if (exts) {\n      exts = [].concat(exts);\n      for (var i = 0, n = exts.length; i < n; i++)\n        this.addWebsocketExtension(exts[i]);\n    }\n\n    this.tls = options.tls || {};\n    this.tls.ca = this.tls.ca || options.ca;\n\n    for (var type in this._alternates)\n      this._alternates[type] = URI.parse(this._alternates[type]);\n\n    this.maxRequestSize = this.MAX_REQUEST_SIZE;\n  },\n\n  endpointFor: function(connectionType) {\n    return this._alternates[connectionType] || this.endpoint;\n  },\n\n  addWebsocketExtension: function(extension) {\n    this.wsExtensions.push(extension);\n  },\n\n  disable: function(feature) {\n    this._disabled.push(feature);\n  },\n\n  setHeader: function(name, value) {\n    this.headers[name] = value;\n  },\n\n  close: function() {\n    var transport = this._transport;\n    delete this._transport;\n    if (transport) transport.close();\n  },\n\n  getConnectionTypes: function() {\n    return Transport.getConnectionTypes();\n  },\n\n  selectTransport: function(transportTypes) {\n    Transport.get(this, transportTypes, this._disabled, function(transport) {\n      this.debug('Selected ? transport for ?', transport.connectionType, URI.stringify(transport.endpoint));\n\n      if (transport === this._transport) return;\n      if (this._transport) this._transport.close();\n\n      this._transport = transport;\n      this.connectionType = transport.connectionType;\n    }, this);\n  },\n\n  sendMessage: function(message, timeout, options) {\n    options = options || {};\n\n    var id       = message.id,\n        attempts = options.attempts,\n        deadline = options.deadline && new Date().getTime() + (options.deadline * 1000),\n        envelope = this._envelopes[id],\n        scheduler;\n\n    if (!envelope) {\n      scheduler = new this._scheduler(message, {timeout: timeout, interval: this.retry, attempts: attempts, deadline: deadline});\n      envelope  = this._envelopes[id] = {message: message, scheduler: scheduler};\n    }\n\n    this._sendEnvelope(envelope);\n  },\n\n  _sendEnvelope: function(envelope) {\n    if (!this._transport) return;\n    if (envelope.request || envelope.timer) return;\n\n    var message   = envelope.message,\n        scheduler = envelope.scheduler,\n        self      = this;\n\n    if (!scheduler.isDeliverable()) {\n      scheduler.abort();\n      delete this._envelopes[message.id];\n      return;\n    }\n\n    envelope.timer = global.setTimeout(function() {\n      self.handleError(message);\n    }, scheduler.getTimeout() * 1000);\n\n    scheduler.send();\n    envelope.request = this._transport.sendMessage(message);\n  },\n\n  handleResponse: function(reply) {\n    var envelope = this._envelopes[reply.id];\n\n    if (reply.successful !== undefined && envelope) {\n      envelope.scheduler.succeed();\n      delete this._envelopes[reply.id];\n      global.clearTimeout(envelope.timer);\n    }\n\n    this.trigger('message', reply);\n\n    if (this._state === this.UP) return;\n    this._state = this.UP;\n    this._client.trigger('transport:up');\n  },\n\n  handleError: function(message, immediate) {\n    var envelope = this._envelopes[message.id],\n        request  = envelope && envelope.request,\n        self     = this;\n\n    if (!request) return;\n\n    request.then(function(req) {\n      if (req && req.abort) req.abort();\n    });\n\n    var scheduler = envelope.scheduler;\n    scheduler.fail();\n\n    global.clearTimeout(envelope.timer);\n    envelope.request = envelope.timer = null;\n\n    if (immediate) {\n      this._sendEnvelope(envelope);\n    } else {\n      envelope.timer = global.setTimeout(function() {\n        envelope.timer = null;\n        self._sendEnvelope(envelope);\n      }, scheduler.getInterval() * 1000);\n    }\n\n    if (this._state === this.DOWN) return;\n    this._state = this.DOWN;\n    this._client.trigger('transport:down');\n  }\n});\n\nDispatcher.create = function(client, endpoint, options) {\n  return new Dispatcher(client, endpoint, options);\n};\n\nextend(Dispatcher.prototype, Publisher);\nextend(Dispatcher.prototype, Logging);\n\nmodule.exports = Dispatcher;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/cookies/node_cookies.js":"'use strict';\n\nmodule.exports = require('tough-cookie');\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/transport/node_transports.js":"'use strict';\n\nvar Transport = require('./transport');\n\nTransport.register('in-process', require('./node_local'));\nTransport.register('websocket', require('./web_socket'));\nTransport.register('long-polling', require('./node_http'));\n\nmodule.exports = Transport;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/transport/transport.js":"'use strict';\n\nvar Class    = require('../util/class'),\n    Cookie   = require('../util/cookies').Cookie,\n    Promise  = require('../util/promise'),\n    URI      = require('../util/uri'),\n    array    = require('../util/array'),\n    extend   = require('../util/extend'),\n    Logging  = require('../mixins/logging'),\n    Timeouts = require('../mixins/timeouts'),\n    Channel  = require('../protocol/channel');\n\nvar Transport = extend(Class({ className: 'Transport',\n  DEFAULT_PORTS: {'http:': 80, 'https:': 443, 'ws:': 80, 'wss:': 443},\n  MAX_DELAY:     0,\n\n  batching:  true,\n\n  initialize: function(dispatcher, endpoint) {\n    this._dispatcher = dispatcher;\n    this.endpoint    = endpoint;\n    this._outbox     = [];\n    this._proxy      = extend({}, this._dispatcher.proxy);\n\n    if (!this._proxy.origin)\n      this._proxy.origin = this._findProxy();\n  },\n\n  close: function() {},\n\n  encode: function(messages) {\n    return '';\n  },\n\n  sendMessage: function(message) {\n    this.debug('Client ? sending message to ?: ?',\n               this._dispatcher.clientId, URI.stringify(this.endpoint), message);\n\n    if (!this.batching) return Promise.resolve(this.request([message]));\n\n    this._outbox.push(message);\n    this._flushLargeBatch();\n\n    if (message.channel === Channel.HANDSHAKE)\n      return this._publish(0.01);\n\n    if (message.channel === Channel.CONNECT)\n      this._connectMessage = message;\n\n    return this._publish(this.MAX_DELAY);\n  },\n\n  _makePromise: function() {\n    var self = this;\n\n    this._requestPromise = this._requestPromise || new Promise(function(resolve) {\n      self._resolvePromise = resolve;\n    });\n  },\n\n  _publish: function(delay) {\n    this._makePromise();\n\n    this.addTimeout('publish', delay, function() {\n      this._flush();\n      delete this._requestPromise;\n    }, this);\n\n    return this._requestPromise;\n  },\n\n  _flush: function() {\n    this.removeTimeout('publish');\n\n    if (this._outbox.length > 1 && this._connectMessage)\n      this._connectMessage.advice = {timeout: 0};\n\n    this._resolvePromise(this.request(this._outbox));\n\n    this._connectMessage = null;\n    this._outbox = [];\n  },\n\n  _flushLargeBatch: function() {\n    var string = this.encode(this._outbox);\n    if (string.length < this._dispatcher.maxRequestSize) return;\n    var last = this._outbox.pop();\n\n    this._makePromise();\n    this._flush();\n\n    if (last) this._outbox.push(last);\n  },\n\n  _receive: function(replies) {\n    if (!replies) return;\n    replies = [].concat(replies);\n\n    this.debug('Client ? received from ? via ?: ?',\n               this._dispatcher.clientId, URI.stringify(this.endpoint), this.connectionType, replies);\n\n    for (var i = 0, n = replies.length; i < n; i++)\n      this._dispatcher.handleResponse(replies[i]);\n  },\n\n  _handleError: function(messages, immediate) {\n    messages = [].concat(messages);\n\n    this.debug('Client ? failed to send to ? via ?: ?',\n               this._dispatcher.clientId, URI.stringify(this.endpoint), this.connectionType, messages);\n\n    for (var i = 0, n = messages.length; i < n; i++)\n      this._dispatcher.handleError(messages[i]);\n  },\n\n  _getCookies: function() {\n    var cookies = this._dispatcher.cookies,\n        url     = URI.stringify(this.endpoint);\n\n    if (!cookies) return '';\n\n    return array.map(cookies.getCookiesSync(url), function(cookie) {\n      return cookie.cookieString();\n    }).join('; ');\n  },\n\n  _storeCookies: function(setCookie) {\n    var cookies = this._dispatcher.cookies,\n        url     = URI.stringify(this.endpoint),\n        cookie;\n\n    if (!setCookie || !cookies) return;\n    setCookie = [].concat(setCookie);\n\n    for (var i = 0, n = setCookie.length; i < n; i++) {\n      cookie = Cookie.parse(setCookie[i]);\n      cookies.setCookieSync(cookie, url);\n    }\n  },\n\n  _findProxy: function() {\n    if (typeof process === 'undefined') return undefined;\n\n    var protocol = this.endpoint.protocol;\n    if (!protocol) return undefined;\n\n    var name   = protocol.replace(/:$/, '').toLowerCase() + '_proxy',\n        upcase = name.toUpperCase(),\n        env    = process.env,\n        keys, proxy;\n\n    if (name === 'http_proxy' && env.REQUEST_METHOD) {\n      keys = Object.keys(env).filter(function(k) { return /^http_proxy$/i.test(k) });\n      if (keys.length === 1) {\n        if (keys[0] === name && env[upcase] === undefined)\n          proxy = env[name];\n      } else if (keys.length > 1) {\n        proxy = env[name];\n      }\n      proxy = proxy || env['CGI_' + upcase];\n    } else {\n      proxy = env[name] || env[upcase];\n      if (proxy && !env[name])\n        console.warn('The environment variable ' + upcase +\n                     ' is discouraged. Use ' + name + '.');\n    }\n    return proxy;\n  }\n\n}), {\n  get: function(dispatcher, allowed, disabled, callback, context) {\n    var endpoint = dispatcher.endpoint;\n\n    array.asyncEach(this._transports, function(pair, resume) {\n      var connType     = pair[0], klass = pair[1],\n          connEndpoint = dispatcher.endpointFor(connType);\n\n      if (array.indexOf(disabled, connType) >= 0)\n        return resume();\n\n      if (array.indexOf(allowed, connType) < 0) {\n        klass.isUsable(dispatcher, connEndpoint, function() {});\n        return resume();\n      }\n\n      klass.isUsable(dispatcher, connEndpoint, function(isUsable) {\n        if (!isUsable) return resume();\n        var transport = klass.hasOwnProperty('create') ? klass.create(dispatcher, connEndpoint) : new klass(dispatcher, connEndpoint);\n        callback.call(context, transport);\n      });\n    }, function() {\n      throw new Error('Could not find a usable connection type for ' + URI.stringify(endpoint));\n    });\n  },\n\n  register: function(type, klass) {\n    this._transports.push([type, klass]);\n    klass.prototype.connectionType = type;\n  },\n\n  getConnectionTypes: function() {\n    return array.map(this._transports, function(t) { return t[0] });\n  },\n\n  _transports: []\n});\n\nextend(Transport.prototype, Logging);\nextend(Transport.prototype, Timeouts);\n\nmodule.exports = Transport;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/mixins/timeouts.js":"'use strict';\n\nmodule.exports = {\n  addTimeout: function(name, delay, callback, context) {\n    this._timeouts = this._timeouts || {};\n    if (this._timeouts.hasOwnProperty(name)) return;\n    var self = this;\n    this._timeouts[name] = global.setTimeout(function() {\n      delete self._timeouts[name];\n      callback.call(context);\n    }, 1000 * delay);\n  },\n\n  removeTimeout: function(name) {\n    this._timeouts = this._timeouts || {};\n    var timeout = this._timeouts[name];\n    if (!timeout) return;\n    global.clearTimeout(timeout);\n    delete this._timeouts[name];\n  },\n\n  removeAllTimeouts: function() {\n    this._timeouts = this._timeouts || {};\n    for (var name in this._timeouts) this.removeTimeout(name);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/transport/node_local.js":"'use strict';\n\nvar asap       = require('asap'),\n    Class      = require('../util/class'),\n    URI        = require('../util/uri'),\n    copyObject = require('../util/copy_object'),\n    extend     = require('../util/extend'),\n    Server     = require('../protocol/server'),\n    Transport  = require('./transport');\n\nvar NodeLocal = extend(Class(Transport, {\n  batching: false,\n\n  request: function(messages) {\n    messages = copyObject(messages);\n    var self = this;\n\n    asap(function() {\n      self.endpoint.process(messages, null, function(replies) {\n        self._receive(copyObject(replies));\n      });\n    });\n  }\n}), {\n  isUsable: function(client, endpoint, callback, context) {\n    callback.call(context, endpoint instanceof Server);\n  }\n});\n\nmodule.exports = NodeLocal;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/copy_object.js":"'use strict';\n\nvar copyObject = function(object) {\n  var clone, i, key;\n  if (object instanceof Array) {\n    clone = [];\n    i = object.length;\n    while (i--) clone[i] = copyObject(object[i]);\n    return clone;\n  } else if (typeof object === 'object') {\n    clone = (object === null) ? null : {};\n    for (key in object) clone[key] = copyObject(object[key]);\n    return clone;\n  } else {\n    return object;\n  }\n};\n\nmodule.exports = copyObject;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/server.js":"'use strict';\n\nvar Class      = require('../util/class'),\n    array      = require('../util/array'),\n    extend     = require('../util/extend'),\n    constants  = require('../util/constants'),\n    Logging    = require('../mixins/logging'),\n    Engine     = require('../engines/proxy'),\n    Channel    = require('./channel'),\n    Error      = require('./error'),\n    Extensible = require('./extensible'),\n    Grammar    = require('./grammar'),\n    Socket     = require('./socket');\n\nvar Server = Class({ className: 'Server',\n  META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],\n\n  initialize: function(options) {\n    this._options  = options || {};\n    var engineOpts = this._options.engine || {};\n    engineOpts.timeout = this._options.timeout;\n    this._engine   = Engine.get(engineOpts);\n\n    this.info('Created new server: ?', this._options);\n  },\n\n  close: function() {\n    return this._engine.close();\n  },\n\n  openSocket: function(clientId, socket, request) {\n    if (!clientId || !socket) return;\n    this._engine.openSocket(clientId, new Socket(this, socket, request));\n  },\n\n  closeSocket: function(clientId, close) {\n    this._engine.flushConnection(clientId, close);\n  },\n\n  process: function(messages, request, callback, context) {\n    var local = (request === null);\n\n    messages = [].concat(messages);\n    this.info('Processing messages: ? (local: ?)', messages, local);\n\n    if (messages.length === 0) return callback.call(context, []);\n    var processed = 0, responses = [], self = this;\n\n    var gatherReplies = function(replies) {\n      responses = responses.concat(replies);\n      processed += 1;\n      if (processed < messages.length) return;\n\n      var n = responses.length;\n      while (n--) {\n        if (!responses[n]) responses.splice(n,1);\n      }\n      self.info('Returning replies: ?', responses);\n      callback.call(context, responses);\n    };\n\n    var handleReply = function(replies) {\n      var extended = 0, expected = replies.length;\n      if (expected === 0) gatherReplies(replies);\n\n      for (var i = 0, n = replies.length; i < n; i++) {\n        this.debug('Processing reply: ?', replies[i]);\n        (function(index) {\n          self.pipeThroughExtensions('outgoing', replies[index], request, function(message) {\n            replies[index] = message;\n            extended += 1;\n            if (extended === expected) gatherReplies(replies);\n          });\n        })(i);\n      }\n    };\n\n    for (var i = 0, n = messages.length; i < n; i++) {\n      this.pipeThroughExtensions('incoming', messages[i], request, function(pipedMessage) {\n        this._handle(pipedMessage, local, handleReply, this);\n      }, this);\n    }\n  },\n\n  _makeResponse: function(message) {\n    var response = {};\n\n    if (message.id)       response.id       = message.id;\n    if (message.clientId) response.clientId = message.clientId;\n    if (message.channel)  response.channel  = message.channel;\n    if (message.error)    response.error    = message.error;\n\n    response.successful = !response.error;\n    return response;\n  },\n\n  _handle: function(message, local, callback, context) {\n    if (!message) return callback.call(context, []);\n    this.info('Handling message: ? (local: ?)', message, local);\n\n    var channelName = message.channel,\n        error       = message.error,\n        response;\n\n    if (Channel.isMeta(channelName))\n      return this._handleMeta(message, local, callback, context);\n\n    if (!Grammar.CHANNEL_NAME.test(channelName))\n      error = Error.channelInvalid(channelName);\n\n    if (message.data === undefined)\n      error = Error.parameterMissing('data');\n\n    if (!error) this._engine.publish(message);\n\n    response = this._makeResponse(message);\n    if (error) response.error = error;\n    response.successful = !response.error;\n    callback.call(context, [response]);\n  },\n\n  _handleMeta: function(message, local, callback, context) {\n    var method = Channel.parse(message.channel)[1],\n        response;\n\n    if (array.indexOf(this.META_METHODS, method) < 0) {\n      response = this._makeResponse(message);\n      response.error = Error.channelForbidden(message.channel);\n      response.successful = false;\n      return callback.call(context, [response]);\n    }\n\n    this[method](message, local, function(responses) {\n      responses = [].concat(responses);\n      for (var i = 0, n = responses.length; i < n; i++) this._advize(responses[i], message.connectionType);\n      callback.call(context, responses);\n    }, this);\n  },\n\n  _advize: function(response, connectionType) {\n    if (array.indexOf([Channel.HANDSHAKE, Channel.CONNECT], response.channel) < 0)\n      return;\n\n    var interval, timeout;\n    if (connectionType === 'eventsource') {\n      interval = Math.floor(this._engine.timeout * 1000);\n      timeout  = 0;\n    } else {\n      interval = Math.floor(this._engine.interval * 1000);\n      timeout  = Math.floor(this._engine.timeout * 1000);\n    }\n\n    response.advice = response.advice || {};\n    if (response.error) {\n      extend(response.advice, {reconnect:  'handshake'}, false);\n    } else {\n      extend(response.advice, {\n        reconnect:  'retry',\n        interval:   interval,\n        timeout:    timeout\n      }, false);\n    }\n  },\n\n  // MUST contain  * version\n  //               * supportedConnectionTypes\n  // MAY contain   * minimumVersion\n  //               * ext\n  //               * id\n  handshake: function(message, local, callback, context) {\n    var response = this._makeResponse(message);\n    response.version = constants.BAYEUX_VERSION;\n\n    if (!message.version)\n      response.error = Error.parameterMissing('version');\n\n    var clientConns = message.supportedConnectionTypes,\n        commonConns;\n\n    response.supportedConnectionTypes = constants.CONNECTION_TYPES;\n\n    if (clientConns) {\n      commonConns = array.filter(clientConns, function(conn) {\n        return array.indexOf(constants.CONNECTION_TYPES, conn) >= 0;\n      });\n      if (commonConns.length === 0)\n        response.error = Error.conntypeMismatch(clientConns);\n    } else {\n      response.error = Error.parameterMissing('supportedConnectionTypes');\n    }\n\n    response.successful = !response.error;\n    if (!response.successful) return callback.call(context, response);\n\n    this._engine.createClient(function(clientId) {\n      response.clientId = clientId;\n      callback.call(context, response);\n    }, this);\n  },\n\n  // MUST contain  * clientId\n  //               * connectionType\n  // MAY contain   * ext\n  //               * id\n  connect: function(message, local, callback, context) {\n    var response       = this._makeResponse(message),\n        clientId       = message.clientId,\n        connectionType = message.connectionType;\n\n    this._engine.clientExists(clientId, function(exists) {\n      if (!exists)         response.error = Error.clientUnknown(clientId);\n      if (!clientId)       response.error = Error.parameterMissing('clientId');\n\n      if (array.indexOf(constants.CONNECTION_TYPES, connectionType) < 0)\n        response.error = Error.conntypeMismatch(connectionType);\n\n      if (!connectionType) response.error = Error.parameterMissing('connectionType');\n\n      response.successful = !response.error;\n\n      if (!response.successful) {\n        delete response.clientId;\n        return callback.call(context, response);\n      }\n\n      if (message.connectionType === 'eventsource') {\n        message.advice = message.advice || {};\n        message.advice.timeout = 0;\n      }\n      this._engine.connect(response.clientId, message.advice, function(events) {\n        callback.call(context, [response].concat(events));\n      });\n    }, this);\n  },\n\n  // MUST contain  * clientId\n  // MAY contain   * ext\n  //               * id\n  disconnect: function(message, local, callback, context) {\n    var response = this._makeResponse(message),\n        clientId = message.clientId;\n\n    this._engine.clientExists(clientId, function(exists) {\n      if (!exists)   response.error = Error.clientUnknown(clientId);\n      if (!clientId) response.error = Error.parameterMissing('clientId');\n\n      response.successful = !response.error;\n      if (!response.successful) delete response.clientId;\n\n      if (response.successful) this._engine.destroyClient(clientId);\n      callback.call(context, response);\n    }, this);\n  },\n\n  // MUST contain  * clientId\n  //               * subscription\n  // MAY contain   * ext\n  //               * id\n  subscribe: function(message, local, callback, context) {\n    var response     = this._makeResponse(message),\n        clientId     = message.clientId,\n        subscription = message.subscription,\n        channel;\n\n    subscription = subscription ? [].concat(subscription) : [];\n\n    this._engine.clientExists(clientId, function(exists) {\n      if (!exists)               response.error = Error.clientUnknown(clientId);\n      if (!clientId)             response.error = Error.parameterMissing('clientId');\n      if (!message.subscription) response.error = Error.parameterMissing('subscription');\n\n      response.subscription = message.subscription || [];\n\n      for (var i = 0, n = subscription.length; i < n; i++) {\n        channel = subscription[i];\n\n        if (response.error) break;\n        if (!local && !Channel.isSubscribable(channel)) response.error = Error.channelForbidden(channel);\n        if (!Channel.isValid(channel))                  response.error = Error.channelInvalid(channel);\n\n        if (response.error) break;\n        this._engine.subscribe(clientId, channel);\n      }\n\n      response.successful = !response.error;\n      callback.call(context, response);\n    }, this);\n  },\n\n  // MUST contain  * clientId\n  //               * subscription\n  // MAY contain   * ext\n  //               * id\n  unsubscribe: function(message, local, callback, context) {\n    var response     = this._makeResponse(message),\n        clientId     = message.clientId,\n        subscription = message.subscription,\n        channel;\n\n    subscription = subscription ? [].concat(subscription) : [];\n\n    this._engine.clientExists(clientId, function(exists) {\n      if (!exists)               response.error = Error.clientUnknown(clientId);\n      if (!clientId)             response.error = Error.parameterMissing('clientId');\n      if (!message.subscription) response.error = Error.parameterMissing('subscription');\n\n      response.subscription = message.subscription || [];\n\n      for (var i = 0, n = subscription.length; i < n; i++) {\n        channel = subscription[i];\n\n        if (response.error) break;\n        if (!local && !Channel.isSubscribable(channel)) response.error = Error.channelForbidden(channel);\n        if (!Channel.isValid(channel))                  response.error = Error.channelInvalid(channel);\n\n        if (response.error) break;\n        this._engine.unsubscribe(clientId, channel);\n      }\n\n      response.successful = !response.error;\n      callback.call(context, response);\n    }, this);\n  }\n});\n\nServer.create = function(options) {\n  return new Server(options);\n};\n\nextend(Server.prototype, Logging);\nextend(Server.prototype, Extensible);\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/engines/proxy.js":"'use strict';\n\nvar asap       = require('asap'),\n    extend     = require('../util/extend'),\n    random     = require('../util/random'),\n    Class      = require('../util/class'),\n    Promise    = require('../util/promise'),\n    Logging    = require('../mixins/logging'),\n    Publisher  = require('../mixins/publisher'),\n    Channel    = require('../protocol/channel'),\n    Connection = require('./connection'),\n    Memory     = require('./memory');\n\nvar Proxy = extend(Class({ className: 'Engine.Proxy',\n  MAX_DELAY:  0,\n  INTERVAL:   0,\n  TIMEOUT:    60,\n\n  initialize: function(options) {\n    this._options     = options || {};\n    this._connections = {};\n    this.interval     = this._options.interval || this.INTERVAL;\n    this.timeout      = this._options.timeout  || this.TIMEOUT;\n\n    var engineClass = this._options.type || Memory;\n    this._engine    = engineClass.create(this, this._options);\n\n    this.bind('close', function(clientId) {\n      var self = this;\n      asap(function() { self.flushConnection(clientId) });\n    }, this);\n\n    this.debug('Created new engine: ?', this._options);\n  },\n\n  connect: function(clientId, options, callback, context) {\n    this.debug('Accepting connection from ?', clientId);\n    this._engine.ping(clientId);\n    var conn = this.connection(clientId, true);\n    conn.connect(options, callback, context);\n    this._engine.emptyQueue(clientId);\n  },\n\n  hasConnection: function(clientId) {\n    return this._connections.hasOwnProperty(clientId);\n  },\n\n  connection: function(clientId, create) {\n    var conn = this._connections[clientId];\n    if (conn || !create) return conn;\n    this._connections[clientId] = new Connection(this, clientId);\n    this.trigger('connection:open', clientId);\n    return this._connections[clientId];\n  },\n\n  closeConnection: function(clientId) {\n    this.debug('Closing connection for ?', clientId);\n    var conn = this._connections[clientId];\n    if (!conn) return;\n    if (conn.socket) conn.socket.close();\n    this.trigger('connection:close', clientId);\n    delete this._connections[clientId];\n  },\n\n  openSocket: function(clientId, socket) {\n    var conn = this.connection(clientId, true);\n    conn.socket = socket;\n  },\n\n  deliver: function(clientId, messages) {\n    if (!messages || messages.length === 0) return false;\n\n    var conn = this.connection(clientId, false);\n    if (!conn) return false;\n\n    for (var i = 0, n = messages.length; i < n; i++) {\n      conn.deliver(messages[i]);\n    }\n    return true;\n  },\n\n  generateId: function() {\n    return random();\n  },\n\n  flushConnection: function(clientId, close) {\n    if (!clientId) return;\n    this.debug('Flushing connection for ?', clientId);\n    var conn = this.connection(clientId, false);\n    if (!conn) return;\n    if (close === false) conn.socket = null;\n    conn.flush();\n    this.closeConnection(clientId);\n  },\n\n  close: function() {\n    for (var clientId in this._connections) this.flushConnection(clientId);\n    this._engine.disconnect();\n  },\n\n  disconnect: function() {\n    if (this._engine.disconnect) return this._engine.disconnect();\n  },\n\n  publish: function(message) {\n    var channels = Channel.expand(message.channel);\n    return this._engine.publish(message, channels);\n  }\n}), {\n  get: function(options) {\n    return new Proxy(options);\n  }\n});\n\nvar METHODS = ['createClient', 'clientExists', 'destroyClient', 'ping', 'subscribe', 'unsubscribe'];\n\nMETHODS.forEach(function(method) {\n  Proxy.prototype[method] = function() {\n    return this._engine[method].apply(this._engine, arguments);\n  };\n});\n\nextend(Proxy.prototype, Publisher);\nextend(Proxy.prototype, Logging);\n\nmodule.exports = Proxy;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/random.js":"'use strict';\n\nvar csprng    = require('csprng'),\n    constants = require('./constants');\n\nmodule.exports = function(bitlength) {\n  bitlength = bitlength || constants.ID_LENGTH;\n  var maxLength = Math.ceil(bitlength * Math.log(2) / Math.log(36));\n  var string = csprng(bitlength, 36);\n  while (string.length < maxLength) string = '0' + string;\n  return string;\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/engines/connection.js":"'use strict';\n\nvar Class      = require('../util/class'),\n    extend     = require('../util/extend'),\n    Deferrable = require('../mixins/deferrable'),\n    Timeouts   = require('../mixins/timeouts');\n\nvar Connection = Class({\n  initialize: function(engine, id, options) {\n    this._engine  = engine;\n    this._id      = id;\n    this._options = options;\n    this._inbox   = [];\n  },\n\n  deliver: function(message) {\n    delete message.clientId;\n    if (this.socket) return this.socket.send(message);\n    this._inbox.push(message);\n    this._beginDeliveryTimeout();\n  },\n\n  connect: function(options, callback, context) {\n    options = options || {};\n    var timeout = (options.timeout !== undefined) ? options.timeout / 1000 : this._engine.timeout;\n\n    this.setDeferredStatus('unknown');\n    this.callback(callback, context);\n\n    this._beginDeliveryTimeout();\n    this._beginConnectionTimeout(timeout);\n  },\n\n  flush: function() {\n    this.removeTimeout('connection');\n    this.removeTimeout('delivery');\n\n    this.setDeferredStatus('succeeded', this._inbox);\n    this._inbox = [];\n\n    if (!this.socket) this._engine.closeConnection(this._id);\n  },\n\n  _beginDeliveryTimeout: function() {\n    if (this._inbox.length === 0) return;\n    this.addTimeout('delivery', this._engine.MAX_DELAY, this.flush, this);\n  },\n\n  _beginConnectionTimeout: function(timeout) {\n    this.addTimeout('connection', timeout, this.flush, this);\n  }\n});\n\nextend(Connection.prototype, Deferrable);\nextend(Connection.prototype, Timeouts);\n\nmodule.exports = Connection;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/engines/memory.js":"'use strict';\n\nvar copyObject = require('../util/copy_object'),\n    extend     = require('../util/extend'),\n    Namespace  = require('../util/namespace'),\n    Set        = require('../util/set'),\n    Timeouts   = require('../mixins/timeouts');\n\nvar Memory = function(server, options) {\n  this._server    = server;\n  this._options   = options || {};\n  this.reset();\n};\n\nMemory.create = function(server, options) {\n  return new Memory(server, options);\n};\n\nMemory.prototype = {\n  disconnect: function() {\n    this.reset();\n    this.removeAllTimeouts();\n  },\n\n  reset: function() {\n    this._namespace = new Namespace();\n    this._clients   = {};\n    this._channels  = {};\n    this._messages  = {};\n  },\n\n  createClient: function(callback, context) {\n    var clientId = this._namespace.generate();\n    this._server.debug('Created new client ?', clientId);\n    this.ping(clientId);\n    this._server.trigger('handshake', clientId);\n    callback.call(context, clientId);\n  },\n\n  destroyClient: function(clientId, callback, context) {\n    if (!this._namespace.exists(clientId)) return;\n    var clients = this._clients;\n\n    if (clients[clientId])\n      clients[clientId].forEach(function(channel) { this.unsubscribe(clientId, channel) }, this);\n\n    this.removeTimeout(clientId);\n    this._namespace.release(clientId);\n    delete this._messages[clientId];\n    this._server.debug('Destroyed client ?', clientId);\n    this._server.trigger('disconnect', clientId);\n    this._server.trigger('close', clientId);\n    if (callback) callback.call(context);\n  },\n\n  clientExists: function(clientId, callback, context) {\n    callback.call(context, this._namespace.exists(clientId));\n  },\n\n  ping: function(clientId) {\n    var timeout = this._server.timeout;\n    if (typeof timeout !== 'number') return;\n\n    this._server.debug('Ping ?, ?', clientId, timeout);\n    this.removeTimeout(clientId);\n    this.addTimeout(clientId, 2 * timeout, function() {\n      this.destroyClient(clientId);\n    }, this);\n  },\n\n  subscribe: function(clientId, channel, callback, context) {\n    var clients = this._clients, channels = this._channels;\n\n    clients[clientId] = clients[clientId] || new Set();\n    var trigger = clients[clientId].add(channel);\n\n    channels[channel] = channels[channel] || new Set();\n    channels[channel].add(clientId);\n\n    this._server.debug('Subscribed client ? to channel ?', clientId, channel);\n    if (trigger) this._server.trigger('subscribe', clientId, channel);\n    if (callback) callback.call(context, true);\n  },\n\n  unsubscribe: function(clientId, channel, callback, context) {\n    var clients  = this._clients,\n        channels = this._channels,\n        trigger  = false;\n\n    if (clients[clientId]) {\n      trigger = clients[clientId].remove(channel);\n      if (clients[clientId].isEmpty()) delete clients[clientId];\n    }\n\n    if (channels[channel]) {\n      channels[channel].remove(clientId);\n      if (channels[channel].isEmpty()) delete channels[channel];\n    }\n\n    this._server.debug('Unsubscribed client ? from channel ?', clientId, channel);\n    if (trigger) this._server.trigger('unsubscribe', clientId, channel);\n    if (callback) callback.call(context, true);\n  },\n\n  publish: function(message, channels) {\n    this._server.debug('Publishing message ?', message);\n\n    var messages = this._messages,\n        clients  = new Set(),\n        subs;\n\n    for (var i = 0, n = channels.length; i < n; i++) {\n      subs = this._channels[channels[i]];\n      if (!subs) continue;\n      subs.forEach(clients.add, clients);\n    }\n\n    clients.forEach(function(clientId) {\n      this._server.debug('Queueing for client ?: ?', clientId, message);\n      messages[clientId] = messages[clientId] || [];\n      messages[clientId].push(copyObject(message));\n      this.emptyQueue(clientId);\n    }, this);\n\n    this._server.trigger('publish', message.clientId, message.channel, message.data);\n  },\n\n  emptyQueue: function(clientId) {\n    if (!this._server.hasConnection(clientId)) return;\n    this._server.deliver(clientId, this._messages[clientId]);\n    delete this._messages[clientId];\n  }\n};\n\nextend(Memory.prototype, Timeouts);\n\nmodule.exports = Memory;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/namespace.js":"'use strict';\n\nvar Class  = require('./class'),\n    random = require('./random');\n\nmodule.exports = Class({\n  initialize: function() {\n    this._used = {};\n  },\n\n  exists: function(id) {\n    return this._used.hasOwnProperty(id);\n  },\n\n  generate: function() {\n    var name = random();\n    while (this._used.hasOwnProperty(name))\n      name = random();\n    return this._used[name] = name;\n  },\n\n  release: function(id) {\n    delete this._used[id];\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/set.js":"'use strict';\n\nvar Class = require('./class');\n\nmodule.exports = Class({\n  initialize: function() {\n    this._index = {};\n  },\n\n  add: function(item) {\n    var key = (item.id !== undefined) ? item.id : item;\n    if (this._index.hasOwnProperty(key)) return false;\n    this._index[key] = item;\n    return true;\n  },\n\n  forEach: function(block, context) {\n    for (var key in this._index) {\n      if (this._index.hasOwnProperty(key))\n        block.call(context, this._index[key]);\n    }\n  },\n\n  isEmpty: function() {\n    for (var key in this._index) {\n      if (this._index.hasOwnProperty(key)) return false;\n    }\n    return true;\n  },\n\n  member: function(item) {\n    for (var key in this._index) {\n      if (this._index[key] === item) return true;\n    }\n    return false;\n  },\n\n  remove: function(item) {\n    var key = (item.id !== undefined) ? item.id : item;\n    var removed = this._index[key];\n    delete this._index[key];\n    return removed;\n  },\n\n  toArray: function() {\n    var array = [];\n    this.forEach(function(item) { array.push(item) });\n    return array;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/error.js":"'use strict';\n\nvar Class   = require('../util/class'),\n    Grammar = require('./grammar');\n\nvar Error = Class({\n  initialize: function(code, params, message) {\n    this.code    = code;\n    this.params  = Array.prototype.slice.call(params);\n    this.message = message;\n  },\n\n  toString: function() {\n    return this.code + ':' +\n           this.params.join(',') + ':' +\n           this.message;\n  }\n});\n\nError.parse = function(message) {\n  message = message || '';\n  if (!Grammar.ERROR.test(message)) return new Error(null, [], message);\n\n  var parts   = message.split(':'),\n      code    = parseInt(parts[0]),\n      params  = parts[1].split(','),\n      message = parts[2];\n\n  return new Error(code, params, message);\n};\n\n// http://code.google.com/p/cometd/wiki/BayeuxCodes\nvar errors = {\n  versionMismatch:  [300, 'Version mismatch'],\n  conntypeMismatch: [301, 'Connection types not supported'],\n  extMismatch:      [302, 'Extension mismatch'],\n  badRequest:       [400, 'Bad request'],\n  clientUnknown:    [401, 'Unknown client'],\n  parameterMissing: [402, 'Missing required parameter'],\n  channelForbidden: [403, 'Forbidden channel'],\n  channelUnknown:   [404, 'Unknown channel'],\n  channelInvalid:   [405, 'Invalid channel'],\n  extUnknown:       [406, 'Unknown extension'],\n  publishFailed:    [407, 'Failed to publish'],\n  serverError:      [500, 'Internal server error']\n};\n\nfor (var name in errors)\n  (function(name) {\n    Error[name] = function() {\n      return new Error(errors[name][0], arguments, errors[name][1]).toString();\n    };\n  })(name);\n\nmodule.exports = Error;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/extensible.js":"'use strict';\n\nvar extend  = require('../util/extend'),\n    Logging = require('../mixins/logging');\n\nvar Extensible = {\n  addExtension: function(extension) {\n    this._extensions = this._extensions || [];\n    this._extensions.push(extension);\n    if (extension.added) extension.added(this);\n  },\n\n  removeExtension: function(extension) {\n    if (!this._extensions) return;\n    var i = this._extensions.length;\n    while (i--) {\n      if (this._extensions[i] !== extension) continue;\n      this._extensions.splice(i,1);\n      if (extension.removed) extension.removed(this);\n    }\n  },\n\n  pipeThroughExtensions: function(stage, message, request, callback, context) {\n    this.debug('Passing through ? extensions: ?', stage, message);\n\n    if (!this._extensions) return callback.call(context, message);\n    var extensions = this._extensions.slice();\n\n    var pipe = function(message) {\n      if (!message) return callback.call(context, message);\n\n      var extension = extensions.shift();\n      if (!extension) return callback.call(context, message);\n\n      var fn = extension[stage];\n      if (!fn) return pipe(message);\n\n      if (fn.length >= 3) extension[stage](message, request, pipe);\n      else                extension[stage](message, pipe);\n    };\n    pipe(message);\n  }\n};\n\nextend(Extensible, Logging);\n\nmodule.exports = Extensible;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/socket.js":"'use strict';\n\nvar Class  = require('../util/class'),\n    toJSON = require('../util/to_json');\n\nmodule.exports = Class({\n  initialize: function(server, socket, request) {\n    this._server  = server;\n    this._socket  = socket;\n    this._request = request;\n  },\n\n  send: function(message) {\n    this._server.pipeThroughExtensions('outgoing', message, this._request, function(pipedMessage) {\n      if (this._socket)\n        this._socket.send(toJSON([pipedMessage]));\n    }, this);\n  },\n\n  close: function() {\n    if (this._socket) this._socket.close();\n    delete this._socket;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/transport/web_socket.js":"'use strict';\n\nvar Class      = require('../util/class'),\n    Promise    = require('../util/promise'),\n    Set        = require('../util/set'),\n    URI        = require('../util/uri'),\n    browser    = require('../util/browser'),\n    copyObject = require('../util/copy_object'),\n    extend     = require('../util/extend'),\n    toJSON     = require('../util/to_json'),\n    ws         = require('../util/websocket'),\n    Deferrable = require('../mixins/deferrable'),\n    Transport  = require('./transport');\n\nvar WebSocket = extend(Class(Transport, {\n  UNCONNECTED:  1,\n  CONNECTING:   2,\n  CONNECTED:    3,\n\n  batching:     false,\n\n  isUsable: function(callback, context) {\n    this.callback(function() { callback.call(context, true) });\n    this.errback(function() { callback.call(context, false) });\n    this.connect();\n  },\n\n  request: function(messages) {\n    this._pending = this._pending || new Set();\n    for (var i = 0, n = messages.length; i < n; i++) this._pending.add(messages[i]);\n\n    var self = this;\n\n    var promise = new Promise(function(resolve, reject) {\n      self.callback(function(socket) {\n        if (!socket || socket.readyState !== 1) return;\n        socket.send(toJSON(messages));\n        resolve(socket);\n      });\n\n      self.connect();\n    });\n\n    return {\n      abort: function() { promise.then(function(ws) { ws.close() }) }\n    };\n  },\n\n  connect: function() {\n    if (WebSocket._unloaded) return;\n\n    this._state = this._state || this.UNCONNECTED;\n    if (this._state !== this.UNCONNECTED) return;\n    this._state = this.CONNECTING;\n\n    var socket = this._createSocket();\n    if (!socket) return this.setDeferredStatus('failed');\n\n    var self = this;\n\n    socket.onopen = function() {\n      if (socket.headers) self._storeCookies(socket.headers['set-cookie']);\n      self._socket = socket;\n      self._state = self.CONNECTED;\n      self._everConnected = true;\n      self._ping();\n      self.setDeferredStatus('succeeded', socket);\n    };\n\n    var closed = false;\n    socket.onclose = socket.onerror = function() {\n      if (closed) return;\n      closed = true;\n\n      var wasConnected = (self._state === self.CONNECTED);\n      socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;\n\n      delete self._socket;\n      self._state = self.UNCONNECTED;\n      self.removeTimeout('ping');\n\n      var pending = self._pending ? self._pending.toArray() : [];\n      delete self._pending;\n\n      if (wasConnected || self._everConnected) {\n        self.setDeferredStatus('unknown');\n        self._handleError(pending, wasConnected);\n      } else {\n        self.setDeferredStatus('failed');\n      }\n    };\n\n    socket.onmessage = function(event) {\n      var replies;\n      try { replies = JSON.parse(event.data) } catch (error) {}\n\n      if (!replies) return;\n\n      replies = [].concat(replies);\n\n      for (var i = 0, n = replies.length; i < n; i++) {\n        if (replies[i].successful === undefined) continue;\n        self._pending.remove(replies[i]);\n      }\n      self._receive(replies);\n    };\n  },\n\n  close: function() {\n    if (!this._socket) return;\n    this._socket.close();\n  },\n\n  _createSocket: function() {\n    var url        = WebSocket.getSocketUrl(this.endpoint),\n        headers    = this._dispatcher.headers,\n        extensions = this._dispatcher.wsExtensions,\n        cookie     = this._getCookies(),\n        tls        = this._dispatcher.tls,\n        options    = {extensions: extensions, headers: headers, proxy: this._proxy, tls: tls};\n\n    if (cookie !== '') options.headers['Cookie'] = cookie;\n\n    return ws.create(url, [], options);\n  },\n\n  _ping: function() {\n    if (!this._socket || this._socket.readyState !== 1) return;\n    this._socket.send('[]');\n    this.addTimeout('ping', this._dispatcher.timeout / 2, this._ping, this);\n  }\n\n}), {\n  PROTOCOLS: {\n    'http:':  'ws:',\n    'https:': 'wss:'\n  },\n\n  create: function(dispatcher, endpoint) {\n    var sockets = dispatcher.transports.websocket = dispatcher.transports.websocket || {};\n    sockets[endpoint.href] = sockets[endpoint.href] || new this(dispatcher, endpoint);\n    return sockets[endpoint.href];\n  },\n\n  getSocketUrl: function(endpoint) {\n    endpoint = copyObject(endpoint);\n    endpoint.protocol = this.PROTOCOLS[endpoint.protocol];\n    return URI.stringify(endpoint);\n  },\n\n  isUsable: function(dispatcher, endpoint, callback, context) {\n    this.create(dispatcher, endpoint).isUsable(callback, context);\n  }\n});\n\nextend(WebSocket.prototype, Deferrable);\n\nif (browser.Event && global.onbeforeunload !== undefined)\n  browser.Event.on(global, 'beforeunload', function() { WebSocket._unloaded = true });\n\nmodule.exports = WebSocket;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/websocket/node_websocket.js":"'use strict';\n\nvar WS = require('faye-websocket').Client;\n\nmodule.exports = {\n  create: function(url, protocols, options) {\n    return new WS(url, protocols, options);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/websocket.js":"// API references:\n//\n// * https://html.spec.whatwg.org/multipage/comms.html#network\n// * https://dom.spec.whatwg.org/#interface-eventtarget\n// * https://dom.spec.whatwg.org/#interface-event\n\nvar util   = require('util'),\n    driver = require('websocket-driver'),\n    API    = require('./websocket/api');\n\nvar WebSocket = function(request, socket, body, protocols, options) {\n  options = options || {};\n\n  this._stream = socket;\n  this._driver = driver.http(request, {maxLength: options.maxLength, protocols: protocols});\n\n  var self = this;\n  if (!this._stream || !this._stream.writable) return;\n  if (!this._stream.readable) return this._stream.end();\n\n  var catchup = function() { self._stream.removeListener('data', catchup) };\n  this._stream.on('data', catchup);\n\n  API.call(this, options);\n\n  process.nextTick(function() {\n    self._driver.start();\n    self._driver.io.write(body);\n  });\n};\nutil.inherits(WebSocket, API);\n\nWebSocket.isWebSocket = function(request) {\n  return driver.isWebSocket(request);\n};\n\nWebSocket.validateOptions = function(options, validKeys) {\n  driver.validateOptions(options, validKeys);\n};\n\nWebSocket.WebSocket   = WebSocket;\nWebSocket.Client      = require('./websocket/client');\nWebSocket.EventSource = require('./eventsource');\n\nmodule.exports        = WebSocket;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/websocket/api.js":"var Stream      = require('stream').Stream,\n    util        = require('util'),\n    driver      = require('websocket-driver'),\n    EventTarget = require('./api/event_target'),\n    Event       = require('./api/event');\n\nvar API = function(options) {\n  options = options || {};\n  driver.validateOptions(options, ['headers', 'extensions', 'maxLength', 'ping', 'proxy', 'tls', 'ca']);\n\n  this.readable = this.writable = true;\n\n  var headers = options.headers;\n  if (headers) {\n    for (var name in headers) this._driver.setHeader(name, headers[name]);\n  }\n\n  var extensions = options.extensions;\n  if (extensions) {\n    [].concat(extensions).forEach(this._driver.addExtension, this._driver);\n  }\n\n  this._ping          = options.ping;\n  this._pingId        = 0;\n  this.readyState     = API.CONNECTING;\n  this.bufferedAmount = 0;\n  this.protocol       = '';\n  this.url            = this._driver.url;\n  this.version        = this._driver.version;\n\n  var self = this;\n\n  this._driver.on('open',    function(e) { self._open() });\n  this._driver.on('message', function(e) { self._receiveMessage(e.data) });\n  this._driver.on('close',   function(e) { self._beginClose(e.reason, e.code) });\n\n  this._driver.on('error', function(error) {\n    self._emitError(error.message);\n  });\n  this.on('error', function() {});\n\n  this._driver.messages.on('drain', function() {\n    self.emit('drain');\n  });\n\n  if (this._ping)\n    this._pingTimer = setInterval(function() {\n      self._pingId += 1;\n      self.ping(self._pingId.toString());\n    }, this._ping * 1000);\n\n  this._configureStream();\n\n  if (!this._proxy) {\n    this._stream.pipe(this._driver.io);\n    this._driver.io.pipe(this._stream);\n  }\n};\nutil.inherits(API, Stream);\n\nAPI.CONNECTING = 0;\nAPI.OPEN       = 1;\nAPI.CLOSING    = 2;\nAPI.CLOSED     = 3;\n\nAPI.CLOSE_TIMEOUT = 30000;\n\nvar instance = {\n  write: function(data) {\n    return this.send(data);\n  },\n\n  end: function(data) {\n    if (data !== undefined) this.send(data);\n    this.close();\n  },\n\n  pause: function() {\n    return this._driver.messages.pause();\n  },\n\n  resume: function() {\n    return this._driver.messages.resume();\n  },\n\n  send: function(data) {\n    if (this.readyState > API.OPEN) return false;\n    if (!(data instanceof Buffer)) data = String(data);\n    return this._driver.messages.write(data);\n  },\n\n  ping: function(message, callback) {\n    if (this.readyState > API.OPEN) return false;\n    return this._driver.ping(message, callback);\n  },\n\n  close: function(code, reason) {\n    if (code === undefined) code = 1000;\n    if (reason === undefined) reason = '';\n\n    if (code !== 1000 && (code < 3000 || code > 4999))\n      throw new Error(\"Failed to execute 'close' on WebSocket: \" +\n                      \"The code must be either 1000, or between 3000 and 4999. \" +\n                      code + \" is neither.\");\n\n    if (this.readyState !== API.CLOSED) this.readyState = API.CLOSING;\n    this._driver.close(reason, code);\n\n    var self = this;\n\n    this._closeTimer = setTimeout(function() {\n      self._beginClose('', 1006);\n    }, API.CLOSE_TIMEOUT);\n  },\n\n  _configureStream: function() {\n    var self = this;\n\n    this._stream.setTimeout(0);\n    this._stream.setNoDelay(true);\n\n    ['close', 'end'].forEach(function(event) {\n      this._stream.on(event, function() { self._finalizeClose() });\n    }, this);\n\n    this._stream.on('error', function(error) {\n      self._emitError('Network error: ' + self.url + ': ' + error.message);\n      self._finalizeClose();\n    });\n  },\n\n _open: function() {\n    if (this.readyState !== API.CONNECTING) return;\n\n    this.readyState = API.OPEN;\n    this.protocol = this._driver.protocol || '';\n\n    var event = new Event('open');\n    event.initEvent('open', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _receiveMessage: function(data) {\n    if (this.readyState > API.OPEN) return false;\n\n    if (this.readable) this.emit('data', data);\n\n    var event = new Event('message', {data: data});\n    event.initEvent('message', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _emitError: function(message) {\n    if (this.readyState >= API.CLOSING) return;\n\n    var event = new Event('error', {message: message});\n    event.initEvent('error', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _beginClose: function(reason, code) {\n    if (this.readyState === API.CLOSED) return;\n    this.readyState = API.CLOSING;\n    this._closeParams = [reason, code];\n\n    if (this._stream) {\n      this._stream.destroy();\n      if (!this._stream.readable) this._finalizeClose();\n    }\n  },\n\n  _finalizeClose: function() {\n    if (this.readyState === API.CLOSED) return;\n    this.readyState = API.CLOSED;\n\n    if (this._closeTimer) clearTimeout(this._closeTimer);\n    if (this._pingTimer) clearInterval(this._pingTimer);\n    if (this._stream) this._stream.end();\n\n    if (this.readable) this.emit('end');\n    this.readable = this.writable = false;\n\n    var reason = this._closeParams ? this._closeParams[0] : '',\n        code   = this._closeParams ? this._closeParams[1] : 1006;\n\n    var event = new Event('close', {code: code, reason: reason});\n    event.initEvent('close', false, false);\n    this.dispatchEvent(event);\n  }\n};\n\nfor (var method in instance) API.prototype[method] = instance[method];\nfor (var key in EventTarget) API.prototype[key] = EventTarget[key];\n\nmodule.exports = API;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/websocket/api/event_target.js":"var Event = require('./event');\n\nvar EventTarget = {\n  onopen:     null,\n  onmessage:  null,\n  onerror:    null,\n  onclose:    null,\n\n  addEventListener: function(eventType, listener, useCapture) {\n    this.on(eventType, listener);\n  },\n\n  removeEventListener: function(eventType, listener, useCapture) {\n    this.removeListener(eventType, listener);\n  },\n\n  dispatchEvent: function(event) {\n    event.target = event.currentTarget = this;\n    event.eventPhase = Event.AT_TARGET;\n\n    if (this['on' + event.type])\n      this['on' + event.type](event);\n\n    this.emit(event.type, event);\n  }\n};\n\nmodule.exports = EventTarget;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/websocket/api/event.js":"var Event = function(eventType, options) {\n  this.type = eventType;\n  for (var key in options)\n    this[key] = options[key];\n};\n\nEvent.prototype.initEvent = function(eventType, canBubble, cancelable) {\n  this.type       = eventType;\n  this.bubbles    = canBubble;\n  this.cancelable = cancelable;\n};\n\nEvent.prototype.stopPropagation = function() {};\nEvent.prototype.preventDefault  = function() {};\n\nEvent.CAPTURING_PHASE = 1;\nEvent.AT_TARGET       = 2;\nEvent.BUBBLING_PHASE  = 3;\n\nmodule.exports = Event;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/websocket/client.js":"var util   = require('util'),\n    net    = require('net'),\n    tls    = require('tls'),\n    url    = require('url'),\n    driver = require('websocket-driver'),\n    API    = require('./api'),\n    Event  = require('./api/event');\n\nvar DEFAULT_PORTS    = {'http:': 80, 'https:': 443, 'ws:':80, 'wss:': 443},\n    SECURE_PROTOCOLS = ['https:', 'wss:'];\n\nvar Client = function(_url, protocols, options) {\n  options = options || {};\n\n  this.url     = _url;\n  this._driver = driver.client(this.url, {maxLength: options.maxLength, protocols: protocols});\n\n  ['open', 'error'].forEach(function(event) {\n    this._driver.on(event, function() {\n      self.headers    = self._driver.headers;\n      self.statusCode = self._driver.statusCode;\n    });\n  }, this);\n\n  var proxy      = options.proxy || {},\n      endpoint   = url.parse(proxy.origin || this.url),\n      port       = endpoint.port || DEFAULT_PORTS[endpoint.protocol],\n      secure     = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,\n      onConnect  = function() { self._onConnect() },\n      netOptions = options.net || {},\n      originTLS  = options.tls || {},\n      socketTLS  = proxy.origin ? (proxy.tls || {}) : originTLS,\n      self       = this;\n\n  netOptions.host = socketTLS.host = endpoint.hostname;\n  netOptions.port = socketTLS.port = port;\n\n  originTLS.ca = originTLS.ca || options.ca;\n  socketTLS.servername = socketTLS.servername || endpoint.hostname;\n\n  this._stream = secure\n               ? tls.connect(socketTLS, onConnect)\n               : net.connect(netOptions, onConnect);\n\n  if (proxy.origin) this._configureProxy(proxy, originTLS);\n\n  API.call(this, options);\n};\nutil.inherits(Client, API);\n\nClient.prototype._onConnect = function() {\n  var worker = this._proxy || this._driver;\n  worker.start();\n};\n\nClient.prototype._configureProxy = function(proxy, originTLS) {\n  var uri    = url.parse(this.url),\n      secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,\n      self   = this,\n      name;\n\n  this._proxy = this._driver.proxy(proxy.origin);\n\n  if (proxy.headers) {\n    for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);\n  }\n\n  this._proxy.pipe(this._stream, {end: false});\n  this._stream.pipe(this._proxy);\n\n  this._proxy.on('connect', function() {\n    if (secure) {\n      var options = {socket: self._stream, servername: uri.hostname};\n      for (name in originTLS) options[name] = originTLS[name];\n      self._stream = tls.connect(options);\n      self._configureStream();\n    }\n    self._driver.io.pipe(self._stream);\n    self._stream.pipe(self._driver.io);\n    self._driver.start();\n  });\n\n  this._proxy.on('error', function(error) {\n    self._driver.emit('error', error);\n  });\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye-websocket/lib/faye/eventsource.js":"var Stream      = require('stream').Stream,\n    util        = require('util'),\n    driver      = require('websocket-driver'),\n    Headers     = require('websocket-driver/lib/websocket/driver/headers'),\n    API         = require('./websocket/api'),\n    EventTarget = require('./websocket/api/event_target'),\n    Event       = require('./websocket/api/event');\n\nvar EventSource = function(request, response, options) {\n  this.writable = true;\n  options = options || {};\n\n  this._stream = response.socket;\n  this._ping   = options.ping  || this.DEFAULT_PING;\n  this._retry  = options.retry || this.DEFAULT_RETRY;\n\n  var scheme       = driver.isSecureRequest(request) ? 'https:' : 'http:';\n  this.url         = scheme + '//' + request.headers.host + request.url;\n  this.lastEventId = request.headers['last-event-id'] || '';\n  this.readyState  = API.CONNECTING;\n\n  var headers = new Headers(),\n      self    = this;\n\n  if (options.headers) {\n    for (var key in options.headers) headers.set(key, options.headers[key]);\n  }\n\n  if (!this._stream || !this._stream.writable) return;\n  process.nextTick(function() { self._open() });\n\n  this._stream.setTimeout(0);\n  this._stream.setNoDelay(true);\n\n  var handshake = 'HTTP/1.1 200 OK\\r\\n' +\n                  'Content-Type: text/event-stream\\r\\n' +\n                  'Cache-Control: no-cache, no-store\\r\\n' +\n                  'Connection: close\\r\\n' +\n                  headers.toString() +\n                  '\\r\\n' +\n                  'retry: ' + Math.floor(this._retry * 1000) + '\\r\\n\\r\\n';\n\n  this._write(handshake);\n\n  this._stream.on('drain', function() { self.emit('drain') });\n\n  if (this._ping)\n    this._pingTimer = setInterval(function() { self.ping() }, this._ping * 1000);\n\n  ['error', 'end'].forEach(function(event) {\n    self._stream.on(event, function() { self.close() });\n  });\n};\nutil.inherits(EventSource, Stream);\n\nEventSource.isEventSource = function(request) {\n  if (request.method !== 'GET') return false;\n  var accept = (request.headers.accept || '').split(/\\s*,\\s*/);\n  return accept.indexOf('text/event-stream') >= 0;\n};\n\nvar instance = {\n  DEFAULT_PING:   10,\n  DEFAULT_RETRY:  5,\n\n  _write: function(chunk) {\n    if (!this.writable) return false;\n    try {\n      return this._stream.write(chunk, 'utf8');\n    } catch (e) {\n      return false;\n    }\n  },\n\n  _open: function() {\n    if (this.readyState !== API.CONNECTING) return;\n\n    this.readyState = API.OPEN;\n\n    var event = new Event('open');\n    event.initEvent('open', false, false);\n    this.dispatchEvent(event);\n  },\n\n  write: function(message) {\n    return this.send(message);\n  },\n\n  end: function(message) {\n    if (message !== undefined) this.write(message);\n    this.close();\n  },\n\n  send: function(message, options) {\n    if (this.readyState > API.OPEN) return false;\n\n    message = String(message).replace(/(\\r\\n|\\r|\\n)/g, '$1data: ');\n    options = options || {};\n\n    var frame = '';\n    if (options.event) frame += 'event: ' + options.event + '\\r\\n';\n    if (options.id)    frame += 'id: '    + options.id    + '\\r\\n';\n    frame += 'data: ' + message + '\\r\\n\\r\\n';\n\n    return this._write(frame);\n  },\n\n  ping: function() {\n    return this._write(':\\r\\n\\r\\n');\n  },\n\n  close: function() {\n    if (this.readyState > API.OPEN) return false;\n\n    this.readyState = API.CLOSED;\n    this.writable = false;\n    if (this._pingTimer) clearInterval(this._pingTimer);\n    if (this._stream) this._stream.end();\n\n    var event = new Event('close');\n    event.initEvent('close', false, false);\n    this.dispatchEvent(event);\n\n    return true;\n  }\n};\n\nfor (var method in instance) EventSource.prototype[method] = instance[method];\nfor (var key in EventTarget) EventSource.prototype[key] = EventTarget[key];\n\nmodule.exports = EventSource;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/transport/node_http.js":"'use strict';\n\nvar http   = require('http'),\n    https  = require('https'),\n    tunnel = require('tunnel-agent');\n\nvar Class     = require('../util/class'),\n    URI       = require('../util/uri'),\n    extend    = require('../util/extend'),\n    toJSON    = require('../util/to_json'),\n    Transport = require('./transport');\n\nvar NodeHttp = extend(Class(Transport, { className: 'NodeHttp',\n  SECURE_PROTOCOLS: ['https:', 'wss:'],\n\n  initialize: function() {\n    Transport.prototype.initialize.apply(this, arguments);\n\n    this._endpointSecure = (this.SECURE_PROTOCOLS.indexOf(this.endpoint.protocol) >= 0);\n    this._httpClient     = this._endpointSecure ? https : http;\n\n    var proxy = this._proxy;\n    if (!proxy.origin) return;\n\n    this._proxyUri    = URI.parse(proxy.origin);\n    this._proxySecure = (this.SECURE_PROTOCOLS.indexOf(this._proxyUri.protocol) >= 0);\n\n    if (!this._endpointSecure) {\n      this._httpClient = this._proxySecure ? https : http;\n      return;\n    }\n\n    var options = extend({\n      proxy: {\n        host:       this._proxyUri.hostname,\n        port:       this._proxyUri.port || this.DEFAULT_PORTS[this._proxyUri.protocol],\n        proxyAuth:  this._proxyUri.auth,\n        headers:    extend({host: this.endpoint.host}, proxy.headers)\n      }\n    }, this._dispatcher.tls);\n\n    if (this._proxySecure) {\n      extend(options.proxy, proxy.tls);\n      this._tunnel = tunnel.httpsOverHttps(options);\n    } else {\n      this._tunnel = tunnel.httpsOverHttp(options);\n    }\n  },\n\n  encode: function(messages) {\n    return toJSON(messages);\n  },\n\n  request: function(messages) {\n    var content = new Buffer(this.encode(messages), 'utf8'),\n        params  = this._buildParams(content),\n        request = this._httpClient.request(params),\n        self    = this;\n\n    request.on('response', function(response) {\n      self._handleResponse(messages, response);\n      self._storeCookies(response.headers['set-cookie']);\n    });\n\n    request.on('error', function(error) {\n      self.error('HTTP error: ' + error.message);\n      self._handleError(messages);\n    });\n\n    request.end(content);\n    return request;\n  },\n\n  _buildParams: function(content) {\n    var uri    = this.endpoint,\n        proxy  = this._proxyUri,\n        target = this._tunnel ? uri : (proxy || uri);\n\n    var params = {\n      method:   'POST',\n      host:     target.hostname,\n      port:     target.port || this.DEFAULT_PORTS[target.protocol],\n      path:     uri.path,\n      headers:  extend({\n        'Content-Length': content.length,\n        'Content-Type':   'application/json',\n        'Host':           uri.host\n      }, this._dispatcher.headers)\n    };\n\n    var cookie = this._getCookies();\n    if (cookie !== '') params.headers['Cookie'] = cookie;\n\n    if (this._tunnel) {\n      params.agent = this._tunnel;\n    } else if (this._endpointSecure) {\n      extend(params, this._dispatcher.tls);\n    } else if (proxy) {\n      params.path = this.endpoint.href;\n      extend(params, this._proxy.tls);\n      if (proxy.auth)\n        params.headers['Proxy-Authorization'] = new Buffer(proxy.auth, 'utf8').toString('base64');\n    }\n\n    return params;\n  },\n\n  _handleResponse: function(messages, response) {\n    var body = '',\n        self = this;\n\n    response.setEncoding('utf8');\n    response.on('data', function(chunk) { body += chunk });\n\n    response.on('end', function() {\n      var replies;\n      try { replies = JSON.parse(body) } catch (error) {}\n\n      if (replies)\n        self._receive(replies);\n      else\n        self._handleError(messages);\n    });\n  }\n\n}), {\n  isUsable: function(dispatcher, endpoint, callback, context) {\n    callback.call(context, URI.isURI(endpoint));\n  }\n});\n\nmodule.exports = NodeHttp;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/scheduler.js":"'use strict';\n\nvar extend = require('../util/extend');\n\nvar Scheduler = function(message, options) {\n  this.message  = message;\n  this.options  = options;\n  this.attempts = 0;\n};\n\nextend(Scheduler.prototype, {\n  getTimeout: function() {\n    return this.options.timeout;\n  },\n\n  getInterval: function() {\n    return this.options.interval;\n  },\n\n  isDeliverable: function() {\n    var attempts = this.options.attempts,\n        made     = this.attempts,\n        deadline = this.options.deadline,\n        now      = new Date().getTime();\n\n    if (attempts !== undefined && made >= attempts)\n      return false;\n\n    if (deadline !== undefined && now > deadline)\n      return false;\n\n    return true;\n  },\n\n  send: function() {\n    this.attempts += 1;\n  },\n\n  succeed: function() {},\n\n  fail: function() {},\n\n  abort: function() {}\n});\n\nmodule.exports = Scheduler;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/publication.js":"'use strict';\n\nvar Class      = require('../util/class'),\n    Deferrable = require('../mixins/deferrable');\n\nmodule.exports = Class(Deferrable);\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/protocol/subscription.js":"'use strict';\n\nvar Class      = require('../util/class'),\n    extend     = require('../util/extend'),\n    Deferrable = require('../mixins/deferrable');\n\nvar Subscription = Class({\n  initialize: function(client, channels, callback, context) {\n    this._client    = client;\n    this._channels  = channels;\n    this._callback  = callback;\n    this._context   = context;\n    this._cancelled = false;\n  },\n\n  withChannel: function(callback, context) {\n    this._withChannel = [callback, context];\n    return this;\n  },\n\n  apply: function(context, args) {\n    var message = args[0];\n\n    if (this._callback)\n      this._callback.call(this._context, message.data);\n\n    if (this._withChannel)\n      this._withChannel[0].call(this._withChannel[1], message.channel, message.data);\n  },\n\n  cancel: function() {\n    if (this._cancelled) return;\n    this._client.unsubscribe(this._channels, this);\n    this._cancelled = true;\n  },\n\n  unsubscribe: function() {\n    this.cancel();\n  }\n});\n\nextend(Subscription.prototype, Deferrable);\n\nmodule.exports = Subscription;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/adapters/node_adapter.js":"'use strict';\n\nvar path        = require('path'),\n    querystring = require('querystring'),\n    url         = require('url'),\n    WebSocket   = require('faye-websocket'),\n    EventSource = WebSocket.EventSource;\n\nvar constants       = require('../util/constants'),\n    extend          = require('../util/extend'),\n    idFromMessages  = require('../util/id_from_messages'),\n    toJSON          = require('../util/to_json'),\n    validateOptions = require('../util/validate_options'),\n    Class           = require('../util/class'),\n    Logging         = require('../mixins/logging'),\n    Publisher       = require('../mixins/publisher'),\n    Client          = require('../protocol/client'),\n    Server          = require('../protocol/server'),\n    contenttypes    = require('./content_types'),\n    StaticServer    = require('./static_server');\n\nvar NodeAdapter = Class({ className: 'NodeAdapter',\n  DEFAULT_ENDPOINT: '/bayeux',\n  SCRIPT_PATH:      'faye-browser-min.js',\n\n  VALID_JSONP_CALLBACK: /^[a-z_\\$][a-z0-9_\\$]*(\\.[a-z_\\$][a-z0-9_\\$]*)*$/i,\n\n  initialize: function(options) {\n    this._options = options || {};\n    validateOptions(this._options, ['engine', 'mount', 'ping', 'timeout', 'extensions', 'websocketExtensions']);\n\n    this._extensions = [];\n    this._endpoint   = this._options.mount || this.DEFAULT_ENDPOINT;\n    this._endpointRe = new RegExp('^' + this._endpoint.replace(/\\/$/, '') + '(/[^/]*)*(\\\\.[^\\\\.]+)?$');\n    this._server     = Server.create(this._options);\n\n    this._static = new StaticServer(path.join(__dirname, '..', '..', 'client'), /\\.(?:js|map)$/);\n    this._static.map(path.basename(this._endpoint) + '.js', this.SCRIPT_PATH);\n    this._static.map('client.js', this.SCRIPT_PATH);\n\n    var extensions = this._options.extensions,\n        websocketExtensions = this._options.websocketExtensions,\n        i, n;\n\n    if (extensions) {\n      extensions = [].concat(extensions);\n      for (i = 0, n = extensions.length; i < n; i++)\n        this.addExtension(extensions[i]);\n    }\n\n    if (websocketExtensions) {\n      websocketExtensions = [].concat(websocketExtensions);\n      for (i = 0, n = websocketExtensions.length; i < n; i++)\n        this.addWebsocketExtension(websocketExtensions[i]);\n    }\n  },\n\n  listen: function() {\n    throw new Error('The listen() method is deprecated - use the attach() method to bind Faye to an http.Server');\n  },\n\n  addExtension: function(extension) {\n    return this._server.addExtension(extension);\n  },\n\n  removeExtension: function(extension) {\n    return this._server.removeExtension(extension);\n  },\n\n  addWebsocketExtension: function(extension) {\n    this._extensions.push(extension);\n  },\n\n  close: function() {\n    return this._server.close();\n  },\n\n  getClient: function() {\n    return this._client = this._client || new Client(this._server);\n  },\n\n  attach: function(httpServer) {\n    this._overrideListeners(httpServer, 'request', 'handle');\n    this._overrideListeners(httpServer, 'upgrade', 'handleUpgrade');\n  },\n\n  _overrideListeners: function(httpServer, event, method) {\n    var listeners = httpServer.listeners(event),\n        self      = this;\n\n    httpServer.removeAllListeners(event);\n\n    httpServer.on(event, function(request) {\n      if (self.check(request)) return self[method].apply(self, arguments);\n\n      for (var i = 0, n = listeners.length; i < n; i++)\n        listeners[i].apply(this, arguments);\n    });\n  },\n\n  check: function(request) {\n    var path = url.parse(request.url, true).pathname;\n    return !!this._endpointRe.test(path);\n  },\n\n  handle: function(request, response) {\n    var requestUrl    = url.parse(request.url, true),\n        requestMethod = request.method,\n        self          = this;\n\n    request.originalUrl = request.url;\n\n    request.on('error', function(error) { self._returnError(response, error) });\n    response.on('error', function(error) { self._returnError(null, error) });\n\n    if (this._static.test(requestUrl.pathname))\n      return this._static.call(request, response);\n\n    // http://groups.google.com/group/faye-users/browse_thread/thread/4a01bb7d25d3636a\n    if (requestMethod === 'OPTIONS' || request.headers['access-control-request-method'] === 'POST')\n      return this._handleOptions(response);\n\n    if (EventSource.isEventSource(request))\n      return this.handleEventSource(request, response);\n\n    if (requestMethod === 'GET')\n      return this._callWithParams(request, response, requestUrl.query);\n\n    if (requestMethod === 'POST')\n      return this._concatStream(request, function(data) {\n        var type   = (request.headers['content-type'] || '').split(';')[0],\n            params = (type === 'application/json')\n                   ? {message: data}\n                   : querystring.parse(data);\n\n        request.body = data;\n        this._callWithParams(request, response, params);\n      }, this);\n\n    this._returnError(response, {message: 'Unrecognized request type'});\n  },\n\n  _callWithParams: function(request, response, params) {\n    if (!params.message)\n      return this._returnError(response, {message: 'Received request with no message: ' + this._formatRequest(request)});\n\n    try {\n      this.debug('Received message via HTTP ' + request.method + ': ?', params.message);\n\n      var message = this._parseJSON(params.message),\n          jsonp   = params.jsonp || constants.JSONP_CALLBACK,\n          isGet   = (request.method === 'GET'),\n          type    = isGet ? contenttypes.TYPE_SCRIPT : contenttypes.TYPE_JSON,\n          headers = extend({}, type),\n          origin  = request.headers.origin;\n\n      if (!this.VALID_JSONP_CALLBACK.test(jsonp))\n        return this._returnError(response, {message: 'Invalid JSON-P callback: ' + jsonp});\n\n      if (origin) headers['Access-Control-Allow-Origin'] = origin;\n      headers['Cache-Control'] = 'no-cache, no-store';\n      headers['X-Content-Type-Options'] = 'nosniff';\n\n      this._server.process(message, request, function(replies) {\n        var body = toJSON(replies);\n\n        if (isGet) {\n          body = '/**/' + jsonp + '(' + this._jsonpEscape(body) + ');';\n          headers['Content-Disposition'] = 'attachment; filename=f.txt';\n        }\n\n        headers['Content-Length'] = new Buffer(body, 'utf8').length.toString();\n\n        this.debug('HTTP response: ?', body);\n        response.writeHead(200, headers);\n        response.end(body);\n      }, this);\n    } catch (error) {\n      this._returnError(response, error);\n    }\n  },\n\n  _jsonpEscape: function(json) {\n    return json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n  },\n\n  handleUpgrade: function(request, socket, head) {\n    var options  = {extensions: this._extensions, ping: this._options.ping},\n        ws       = new WebSocket(request, socket, head, [], options),\n        clientId = null,\n        self     = this;\n\n    request.originalUrl = request.url;\n\n    ws.onmessage = function(event) {\n      try {\n        self.debug('Received message via WebSocket[' + ws.version + ']: ?', event.data);\n\n        var message = self._parseJSON(event.data),\n            cid     = idFromMessages(message);\n\n        if (clientId && cid && cid !== clientId) self._server.closeSocket(clientId, false);\n        self._server.openSocket(cid, ws, request);\n        if (cid) clientId = cid;\n\n        self._server.process(message, request, function(replies) {\n          if (ws) ws.send(toJSON(replies));\n        });\n      } catch (error) {\n        console.log(error.stack);\n        self.error(error.message + '\\nBacktrace:\\n' + error.stack);\n      }\n    };\n\n    ws.onclose = function(event) {\n      self._server.closeSocket(clientId);\n      ws = null;\n    };\n  },\n\n  handleEventSource: function(request, response) {\n    var es       = new EventSource(request, response, {ping: this._options.ping}),\n        clientId = es.url.split('/').pop(),\n        self     = this;\n\n    this.debug('Opened EventSource connection for ?', clientId);\n    this._server.openSocket(clientId, es, request);\n\n    es.onclose = function(event) {\n      self._server.closeSocket(clientId);\n      es = null;\n    };\n  },\n\n  _handleOptions: function(response) {\n    var headers = {\n      'Access-Control-Allow-Credentials': 'false',\n      'Access-Control-Allow-Headers':     'Accept, Authorization, Content-Type, Pragma, X-Requested-With',\n      'Access-Control-Allow-Methods':     'POST, GET',\n      'Access-Control-Allow-Origin':      '*',\n      'Access-Control-Max-Age':           '86400'\n    };\n\n    response.writeHead(200, headers);\n    response.end('');\n  },\n\n  _concatStream: function(stream, callback, context) {\n    var chunks = [],\n        length = 0;\n\n    stream.on('data', function(chunk) {\n      chunks.push(chunk);\n      length += chunk.length;\n    });\n\n    stream.on('end', function() {\n      var buffer = new Buffer(length),\n          offset = 0;\n\n      for (var i = 0, n = chunks.length; i < n; i++) {\n        chunks[i].copy(buffer, offset);\n        offset += chunks[i].length;\n      }\n      callback.call(context, buffer.toString('utf8'));\n    });\n  },\n\n  _parseJSON: function(json) {\n    var data = JSON.parse(json);\n    if (typeof data === 'object') return data;\n    throw new SyntaxError('JSON messages must contain an object or array');\n  },\n\n  _formatRequest: function(request) {\n    var method = request.method.toUpperCase(),\n        string = 'curl -X ' + method;\n\n    string += \" 'http://\" + request.headers.host + request.url + \"'\";\n    if (method === 'POST') {\n      string += \" -H 'Content-Type: \" + request.headers['content-type'] + \"'\";\n      string += \" -d '\" + request.body + \"'\";\n    }\n    return string;\n  },\n\n  _returnError: function(response, error) {\n    var message = error.message;\n    if (error.stack) message += '\\nBacktrace:\\n' + error.stack;\n    this.error(message);\n\n    if (!response) return;\n\n    response.writeHead(400, contenttypes.TYPE_TEXT);\n    response.end('Bad request');\n  }\n});\n\nfor (var method in Publisher) (function(method) {\n  NodeAdapter.prototype[method] = function() {\n    return this._server._engine[method].apply(this._server._engine, arguments);\n  };\n})(method);\n\nextend(NodeAdapter.prototype, Logging);\n\nmodule.exports = NodeAdapter;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/util/id_from_messages.js":"'use strict';\n\nvar array = require('./array');\n\nmodule.exports = function(messages) {\n  var connect = array.filter([].concat(messages), function(message) {\n    return message.channel === '/meta/connect';\n  });\n  return connect[0] && connect[0].clientId;\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/adapters/content_types.js":"module.exports = {\n  TYPE_JSON:    {'Content-Type': 'application/json; charset=utf-8'},\n  TYPE_SCRIPT:  {'Content-Type': 'text/javascript; charset=utf-8'},\n  TYPE_TEXT:    {'Content-Type': 'text/plain; charset=utf-8'}\n};\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/src/adapters/static_server.js":"'use strict';\n\nvar crypto = require('crypto'),\n    fs     = require('fs'),\n    path   = require('path'),\n    url    = require('url');\n\nvar Class        = require('../util/class'),\n    extend       = require('../util/extend'),\n    contenttypes = require('./content_types');\n\nvar StaticServer = Class({\n  initialize: function(directory, pathRegex) {\n    this._directory = directory;\n    this._pathRegex = pathRegex;\n    this._pathMap   = {};\n    this._index     = {};\n  },\n\n  map: function(requestPath, filename) {\n    this._pathMap[requestPath] = filename;\n  },\n\n  test: function(pathname) {\n    return this._pathRegex.test(pathname);\n  },\n\n  call: function(request, response) {\n    var pathname = url.parse(request.url, true).pathname,\n        filename = path.basename(pathname);\n\n    filename = this._pathMap[filename] || filename;\n    this._index[filename] = this._index[filename] || {};\n\n    var cache    = this._index[filename],\n        fullpath = path.join(this._directory, filename);\n\n    try {\n      cache.content = cache.content || fs.readFileSync(fullpath);\n      cache.digest  = cache.digest  || crypto.createHash('sha1').update(cache.content).digest('hex');\n      cache.mtime   = cache.mtime   || fs.statSync(fullpath).mtime;\n    } catch (error) {\n      response.writeHead(404, {});\n      return response.end();\n    }\n\n    var type = /\\.js$/.test(pathname) ? 'TYPE_SCRIPT' : 'TYPE_JSON',\n        ims  = request.headers['if-modified-since'];\n\n    var headers = {\n      'ETag':          cache.digest,\n      'Last-Modified': cache.mtime.toGMTString()\n    };\n\n    if (request.headers['if-none-match'] === cache.digest) {\n      response.writeHead(304, headers);\n      response.end();\n    }\n    else if (ims && cache.mtime <= new Date(ims)) {\n      response.writeHead(304, headers);\n      response.end();\n    }\n    else {\n      headers['Content-Length'] = cache.content.length;\n      extend(headers, contenttypes[type]);\n      response.writeHead(200, headers);\n      response.end(cache.content);\n    }\n  }\n});\n\nmodule.exports = StaticServer;\n","/home/travis/build/npmtest/node-npmtest-faye/node_modules/faye/client/faye-browser.js":"var Faye =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar constants = __webpack_require__(1),\n\t    Logging   = __webpack_require__(2);\n\t\n\tvar Faye = {\n\t  VERSION:    constants.VERSION,\n\t\n\t  Client:     __webpack_require__(4),\n\t  Scheduler:  __webpack_require__(32)\n\t};\n\t\n\tLogging.wrapper = Faye;\n\t\n\tmodule.exports = Faye;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  VERSION:          '1.2.4',\n\t\n\t  BAYEUX_VERSION:   '1.0',\n\t  ID_LENGTH:        160,\n\t  JSONP_CALLBACK:   'jsonpcallback',\n\t  CONNECTION_TYPES: ['long-polling', 'cross-origin-long-polling', 'callback-polling', 'websocket', 'eventsource', 'in-process'],\n\t\n\t  MANDATORY_CONNECTION_TYPES: ['long-polling', 'callback-polling', 'in-process']\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar toJSON = __webpack_require__(3);\n\t\n\tvar Logging = {\n\t  LOG_LEVELS: {\n\t    fatal:  4,\n\t    error:  3,\n\t    warn:   2,\n\t    info:   1,\n\t    debug:  0\n\t  },\n\t\n\t  writeLog: function(messageArgs, level) {\n\t    var logger = Logging.logger || (Logging.wrapper || Logging).logger;\n\t    if (!logger) return;\n\t\n\t    var args   = Array.prototype.slice.apply(messageArgs),\n\t        banner = '[Faye',\n\t        klass  = this.className,\n\t\n\t        message = args.shift().replace(/\\?/g, function() {\n\t          try {\n\t            return toJSON(args.shift());\n\t          } catch (error) {\n\t            return '[Object]';\n\t          }\n\t        });\n\t\n\t    if (klass) banner += '.' + klass;\n\t    banner += '] ';\n\t\n\t    if (typeof logger[level] === 'function')\n\t      logger[level](banner + message);\n\t    else if (typeof logger === 'function')\n\t      logger(banner + message);\n\t  }\n\t};\n\t\n\tfor (var key in Logging.LOG_LEVELS)\n\t  (function(level) {\n\t    Logging[level] = function() {\n\t      this.writeLog(arguments, level);\n\t    };\n\t  })(key);\n\t\n\tmodule.exports = Logging;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// http://assanka.net/content/tech/2009/09/02/json2-js-vs-prototype/\n\t\n\tmodule.exports = function(object) {\n\t  return JSON.stringify(object, function(key, value) {\n\t    return (this[key] instanceof Array) ? this[key] : value;\n\t  });\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar asap            = __webpack_require__(5),\n\t    Class           = __webpack_require__(7),\n\t    Promise         = __webpack_require__(9),\n\t    URI             = __webpack_require__(10),\n\t    array           = __webpack_require__(11),\n\t    browser         = __webpack_require__(12),\n\t    constants       = __webpack_require__(1),\n\t    extend          = __webpack_require__(8),\n\t    validateOptions = __webpack_require__(13),\n\t    Deferrable      = __webpack_require__(14),\n\t    Logging         = __webpack_require__(2),\n\t    Publisher       = __webpack_require__(15),\n\t    Channel         = __webpack_require__(17),\n\t    Dispatcher      = __webpack_require__(19),\n\t    Error           = __webpack_require__(33),\n\t    Extensible      = __webpack_require__(34),\n\t    Publication     = __webpack_require__(35),\n\t    Subscription    = __webpack_require__(36);\n\t\n\tvar Client = Class({ className: 'Client',\n\t  UNCONNECTED:        1,\n\t  CONNECTING:         2,\n\t  CONNECTED:          3,\n\t  DISCONNECTED:       4,\n\t\n\t  HANDSHAKE:          'handshake',\n\t  RETRY:              'retry',\n\t  NONE:               'none',\n\t\n\t  CONNECTION_TIMEOUT: 60,\n\t\n\t  DEFAULT_ENDPOINT:   '/bayeux',\n\t  INTERVAL:           0,\n\t\n\t  initialize: function(endpoint, options) {\n\t    this.info('New client created for ?', endpoint);\n\t    options = options || {};\n\t\n\t    validateOptions(options, ['interval', 'timeout', 'endpoints', 'proxy', 'retry', 'scheduler', 'websocketExtensions', 'tls', 'ca']);\n\t\n\t    this._channels   = new Channel.Set();\n\t    this._dispatcher = Dispatcher.create(this, endpoint || this.DEFAULT_ENDPOINT, options);\n\t\n\t    this._messageId = 0;\n\t    this._state     = this.UNCONNECTED;\n\t\n\t    this._responseCallbacks = {};\n\t\n\t    this._advice = {\n\t      reconnect: this.RETRY,\n\t      interval:  1000 * (options.interval || this.INTERVAL),\n\t      timeout:   1000 * (options.timeout  || this.CONNECTION_TIMEOUT)\n\t    };\n\t    this._dispatcher.timeout = this._advice.timeout / 1000;\n\t\n\t    this._dispatcher.bind('message', this._receiveMessage, this);\n\t\n\t    if (browser.Event && global.onbeforeunload !== undefined)\n\t      browser.Event.on(global, 'beforeunload', function() {\n\t        if (array.indexOf(this._dispatcher._disabled, 'autodisconnect') < 0)\n\t          this.disconnect();\n\t      }, this);\n\t  },\n\t\n\t  addWebsocketExtension: function(extension) {\n\t    return this._dispatcher.addWebsocketExtension(extension);\n\t  },\n\t\n\t  disable: function(feature) {\n\t    return this._dispatcher.disable(feature);\n\t  },\n\t\n\t  setHeader: function(name, value) {\n\t    return this._dispatcher.setHeader(name, value);\n\t  },\n\t\n\t  // Request\n\t  // MUST include:  * channel\n\t  //                * version\n\t  //                * supportedConnectionTypes\n\t  // MAY include:   * minimumVersion\n\t  //                * ext\n\t  //                * id\n\t  //\n\t  // Success Response                             Failed Response\n\t  // MUST include:  * channel                     MUST include:  * channel\n\t  //                * version                                    * successful\n\t  //                * supportedConnectionTypes                   * error\n\t  //                * clientId                    MAY include:   * supportedConnectionTypes\n\t  //                * successful                                 * advice\n\t  // MAY include:   * minimumVersion                             * version\n\t  //                * advice                                     * minimumVersion\n\t  //                * ext                                        * ext\n\t  //                * id                                         * id\n\t  //                * authSuccessful\n\t  handshake: function(callback, context) {\n\t    if (this._advice.reconnect === this.NONE) return;\n\t    if (this._state !== this.UNCONNECTED) return;\n\t\n\t    this._state = this.CONNECTING;\n\t    var self = this;\n\t\n\t    this.info('Initiating handshake with ?', URI.stringify(this._dispatcher.endpoint));\n\t    this._dispatcher.selectTransport(constants.MANDATORY_CONNECTION_TYPES);\n\t\n\t    this._sendMessage({\n\t      channel:                  Channel.HANDSHAKE,\n\t      version:                  constants.BAYEUX_VERSION,\n\t      supportedConnectionTypes: this._dispatcher.getConnectionTypes()\n\t\n\t    }, {}, function(response) {\n\t\n\t      if (response.successful) {\n\t        this._state = this.CONNECTED;\n\t        this._dispatcher.clientId  = response.clientId;\n\t\n\t        this._dispatcher.selectTransport(response.supportedConnectionTypes);\n\t\n\t        this.info('Handshake successful: ?', this._dispatcher.clientId);\n\t\n\t        this.subscribe(this._channels.getKeys(), true);\n\t        if (callback) asap(function() { callback.call(context) });\n\t\n\t      } else {\n\t        this.info('Handshake unsuccessful');\n\t        global.setTimeout(function() { self.handshake(callback, context) }, this._dispatcher.retry * 1000);\n\t        this._state = this.UNCONNECTED;\n\t      }\n\t    }, this);\n\t  },\n\t\n\t  // Request                              Response\n\t  // MUST include:  * channel             MUST include:  * channel\n\t  //                * clientId                           * successful\n\t  //                * connectionType                     * clientId\n\t  // MAY include:   * ext                 MAY include:   * error\n\t  //                * id                                 * advice\n\t  //                                                     * ext\n\t  //                                                     * id\n\t  //                                                     * timestamp\n\t  connect: function(callback, context) {\n\t    if (this._advice.reconnect === this.NONE) return;\n\t    if (this._state === this.DISCONNECTED) return;\n\t\n\t    if (this._state === this.UNCONNECTED)\n\t      return this.handshake(function() { this.connect(callback, context) }, this);\n\t\n\t    this.callback(callback, context);\n\t    if (this._state !== this.CONNECTED) return;\n\t\n\t    this.info('Calling deferred actions for ?', this._dispatcher.clientId);\n\t    this.setDeferredStatus('succeeded');\n\t    this.setDeferredStatus('unknown');\n\t\n\t    if (this._connectRequest) return;\n\t    this._connectRequest = true;\n\t\n\t    this.info('Initiating connection for ?', this._dispatcher.clientId);\n\t\n\t    this._sendMessage({\n\t      channel:        Channel.CONNECT,\n\t      clientId:       this._dispatcher.clientId,\n\t      connectionType: this._dispatcher.connectionType\n\t\n\t    }, {}, this._cycleConnection, this);\n\t  },\n\t\n\t  // Request                              Response\n\t  // MUST include:  * channel             MUST include:  * channel\n\t  //                * clientId                           * successful\n\t  // MAY include:   * ext                                * clientId\n\t  //                * id                  MAY include:   * error\n\t  //                                                     * ext\n\t  //                                                     * id\n\t  disconnect: function() {\n\t    if (this._state !== this.CONNECTED) return;\n\t    this._state = this.DISCONNECTED;\n\t\n\t    this.info('Disconnecting ?', this._dispatcher.clientId);\n\t    var promise = new Publication();\n\t\n\t    this._sendMessage({\n\t      channel:  Channel.DISCONNECT,\n\t      clientId: this._dispatcher.clientId\n\t\n\t    }, {}, function(response) {\n\t      if (response.successful) {\n\t        this._dispatcher.close();\n\t        promise.setDeferredStatus('succeeded');\n\t      } else {\n\t        promise.setDeferredStatus('failed', Error.parse(response.error));\n\t      }\n\t    }, this);\n\t\n\t    this.info('Clearing channel listeners for ?', this._dispatcher.clientId);\n\t    this._channels = new Channel.Set();\n\t\n\t    return promise;\n\t  },\n\t\n\t  // Request                              Response\n\t  // MUST include:  * channel             MUST include:  * channel\n\t  //                * clientId                           * successful\n\t  //                * subscription                       * clientId\n\t  // MAY include:   * ext                                * subscription\n\t  //                * id                  MAY include:   * error\n\t  //                                                     * advice\n\t  //                                                     * ext\n\t  //                                                     * id\n\t  //                                                     * timestamp\n\t  subscribe: function(channel, callback, context) {\n\t    if (channel instanceof Array)\n\t      return array.map(channel, function(c) {\n\t        return this.subscribe(c, callback, context);\n\t      }, this);\n\t\n\t    var subscription = new Subscription(this, channel, callback, context),\n\t        force        = (callback === true),\n\t        hasSubscribe = this._channels.hasSubscription(channel);\n\t\n\t    if (hasSubscribe && !force) {\n\t      this._channels.subscribe([channel], subscription);\n\t      subscription.setDeferredStatus('succeeded');\n\t      return subscription;\n\t    }\n\t\n\t    this.connect(function() {\n\t      this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel);\n\t      if (!force) this._channels.subscribe([channel], subscription);\n\t\n\t      this._sendMessage({\n\t        channel:      Channel.SUBSCRIBE,\n\t        clientId:     this._dispatcher.clientId,\n\t        subscription: channel\n\t\n\t      }, {}, function(response) {\n\t        if (!response.successful) {\n\t          subscription.setDeferredStatus('failed', Error.parse(response.error));\n\t          return this._channels.unsubscribe(channel, subscription);\n\t        }\n\t\n\t        var channels = [].concat(response.subscription);\n\t        this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);\n\t        subscription.setDeferredStatus('succeeded');\n\t      }, this);\n\t    }, this);\n\t\n\t    return subscription;\n\t  },\n\t\n\t  // Request                              Response\n\t  // MUST include:  * channel             MUST include:  * channel\n\t  //                * clientId                           * successful\n\t  //                * subscription                       * clientId\n\t  // MAY include:   * ext                                * subscription\n\t  //                * id                  MAY include:   * error\n\t  //                                                     * advice\n\t  //                                                     * ext\n\t  //                                                     * id\n\t  //                                                     * timestamp\n\t  unsubscribe: function(channel, subscription) {\n\t    if (channel instanceof Array)\n\t      return array.map(channel, function(c) {\n\t        return this.unsubscribe(c, subscription);\n\t      }, this);\n\t\n\t    var dead = this._channels.unsubscribe(channel, subscription);\n\t    if (!dead) return;\n\t\n\t    this.connect(function() {\n\t      this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel);\n\t\n\t      this._sendMessage({\n\t        channel:      Channel.UNSUBSCRIBE,\n\t        clientId:     this._dispatcher.clientId,\n\t        subscription: channel\n\t\n\t      }, {}, function(response) {\n\t        if (!response.successful) return;\n\t\n\t        var channels = [].concat(response.subscription);\n\t        this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);\n\t      }, this);\n\t    }, this);\n\t  },\n\t\n\t  // Request                              Response\n\t  // MUST include:  * channel             MUST include:  * channel\n\t  //                * data                               * successful\n\t  // MAY include:   * clientId            MAY include:   * id\n\t  //                * id                                 * error\n\t  //                * ext                                * ext\n\t  publish: function(channel, data, options) {\n\t    validateOptions(options || {}, ['attempts', 'deadline']);\n\t    var publication = new Publication();\n\t\n\t    this.connect(function() {\n\t      this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);\n\t\n\t      this._sendMessage({\n\t        channel:  channel,\n\t        data:     data,\n\t        clientId: this._dispatcher.clientId\n\t\n\t      }, options, function(response) {\n\t        if (response.successful)\n\t          publication.setDeferredStatus('succeeded');\n\t        else\n\t          publication.setDeferredStatus('failed', Error.parse(response.error));\n\t      }, this);\n\t    }, this);\n\t\n\t    return publication;\n\t  },\n\t\n\t  _sendMessage: function(message, options, callback, context) {\n\t    message.id = this._generateMessageId();\n\t\n\t    var timeout = this._advice.timeout\n\t                ? 1.2 * this._advice.timeout / 1000\n\t                : 1.2 * this._dispatcher.retry;\n\t\n\t    this.pipeThroughExtensions('outgoing', message, null, function(message) {\n\t      if (!message) return;\n\t      if (callback) this._responseCallbacks[message.id] = [callback, context];\n\t      this._dispatcher.sendMessage(message, timeout, options || {});\n\t    }, this);\n\t  },\n\t\n\t  _generateMessageId: function() {\n\t    this._messageId += 1;\n\t    if (this._messageId >= Math.pow(2,32)) this._messageId = 0;\n\t    return this._messageId.toString(36);\n\t  },\n\t\n\t  _receiveMessage: function(message) {\n\t    var id = message.id, callback;\n\t\n\t    if (message.successful !== undefined) {\n\t      callback = this._responseCallbacks[id];\n\t      delete this._responseCallbacks[id];\n\t    }\n\t\n\t    this.pipeThroughExtensions('incoming', message, null, function(message) {\n\t      if (!message) return;\n\t      if (message.advice) this._handleAdvice(message.advice);\n\t      this._deliverMessage(message);\n\t      if (callback) callback[0].call(callback[1], message);\n\t    }, this);\n\t  },\n\t\n\t  _handleAdvice: function(advice) {\n\t    extend(this._advice, advice);\n\t    this._dispatcher.timeout = this._advice.timeout / 1000;\n\t\n\t    if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {\n\t      this._state = this.UNCONNECTED;\n\t      this._dispatcher.clientId = null;\n\t      this._cycleConnection();\n\t    }\n\t  },\n\t\n\t  _deliverMessage: function(message) {\n\t    if (!message.channel || message.data === undefined) return;\n\t    this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);\n\t    this._channels.distributeMessage(message);\n\t  },\n\t\n\t  _cycleConnection: function() {\n\t    if (this._connectRequest) {\n\t      this._connectRequest = null;\n\t      this.info('Closed connection for ?', this._dispatcher.clientId);\n\t    }\n\t    var self = this;\n\t    global.setTimeout(function() { self.connect() }, this._advice.interval);\n\t  }\n\t});\n\t\n\textend(Client.prototype, Deferrable);\n\textend(Client.prototype, Publisher);\n\textend(Client.prototype, Logging);\n\textend(Client.prototype, Extensible);\n\t\n\tmodule.exports = Client;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t// rawAsap provides everything we need except exception management.\n\tvar rawAsap = __webpack_require__(6);\n\t// RawTasks are recycled to reduce GC churn.\n\tvar freeTasks = [];\n\t// We queue errors to ensure they are thrown in right order (FIFO).\n\t// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\tvar pendingErrors = [];\n\tvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\t\n\tfunction throwFirstError() {\n\t    if (pendingErrors.length) {\n\t        throw pendingErrors.shift();\n\t    }\n\t}\n\t\n\t/**\n\t * Calls a task as soon as possible after returning, in its own event, with priority\n\t * over other events like animation, reflow, and repaint. An error thrown from an\n\t * event will not interrupt, nor even substantially slow down the processing of\n\t * other events, but will be rather postponed to a lower priority event.\n\t * @param {{call}} task A callable object, typically a function that takes no\n\t * arguments.\n\t */\n\tmodule.exports = asap;\n\tfunction asap(task) {\n\t    var rawTask;\n\t    if (freeTasks.length) {\n\t        rawTask = freeTasks.pop();\n\t    } else {\n\t        rawTask = new RawTask();\n\t    }\n\t    rawTask.task = task;\n\t    rawAsap(rawTask);\n\t}\n\t\n\t// We wrap tasks with recyclable task objects.  A task object implements\n\t// `call`, just like a function.\n\tfunction RawTask() {\n\t    this.task = null;\n\t}\n\t\n\t// The sole purpose of wrapping the task is to catch the exception and recycle\n\t// the task object after its single use.\n\tRawTask.prototype.call = function () {\n\t    try {\n\t        this.task.call();\n\t    } catch (error) {\n\t        if (asap.onerror) {\n\t            // This hook exists purely for testing purposes.\n\t            // Its name will be periodically randomized to break any code that\n\t            // depends on its existence.\n\t            asap.onerror(error);\n\t        } else {\n\t            // In a web browser, exceptions are not fatal. However, to avoid\n\t            // slowing down the queue of pending tasks, we rethrow the error in a\n\t            // lower priority turn.\n\t            pendingErrors.push(error);\n\t            requestErrorThrow();\n\t        }\n\t    } finally {\n\t        this.task = null;\n\t        freeTasks[freeTasks.length] = this;\n\t    }\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t\n\t// Use the fastest means possible to execute a task in its own turn, with\n\t// priority over other events including IO, animation, reflow, and redraw\n\t// events in browsers.\n\t//\n\t// An exception thrown by a task will permanently interrupt the processing of\n\t// subsequent tasks. The higher level `asap` function ensures that if an\n\t// exception is thrown by a task, that the task queue will continue flushing as\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to\n\t// either ensure that no exceptions are thrown from your task, or to manually\n\t// call `rawAsap.requestFlush` if an exception is thrown.\n\tmodule.exports = rawAsap;\n\tfunction rawAsap(task) {\n\t    if (!queue.length) {\n\t        requestFlush();\n\t        flushing = true;\n\t    }\n\t    // Equivalent to push, but avoids a function call.\n\t    queue[queue.length] = task;\n\t}\n\t\n\tvar queue = [];\n\t// Once a flush has been requested, no further calls to `requestFlush` are\n\t// necessary until the next `flush` completes.\n\tvar flushing = false;\n\t// `requestFlush` is an implementation-specific method that attempts to kick\n\t// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n\t// the event queue before yielding to the browser's own event loop.\n\tvar requestFlush;\n\t// The position of the next task to execute in the task queue. This is\n\t// preserved between calls to `flush` so that it can be resumed if\n\t// a task throws an exception.\n\tvar index = 0;\n\t// If a task schedules additional tasks recursively, the task queue can grow\n\t// unbounded. To prevent memory exhaustion, the task queue will periodically\n\t// truncate already-completed tasks.\n\tvar capacity = 1024;\n\t\n\t// The flush function processes all tasks that have been scheduled with\n\t// `rawAsap` unless and until one of those tasks throws an exception.\n\t// If a task throws an exception, `flush` ensures that its state will remain\n\t// consistent and will resume where it left off when called again.\n\t// However, `flush` does not make any arrangements to be called again if an\n\t// exception is thrown.\n\tfunction flush() {\n\t    while (index < queue.length) {\n\t        var currentIndex = index;\n\t        // Advance the index before calling the task. This ensures that we will\n\t        // begin flushing on the next task the task throws an error.\n\t        index = index + 1;\n\t        queue[currentIndex].call();\n\t        // Prevent leaking memory for long chains of recursive calls to `asap`.\n\t        // If we call `asap` within tasks scheduled by `asap`, the queue will\n\t        // grow, but to avoid an O(n) walk for every task we execute, we don't\n\t        // shift tasks off the queue after they have been executed.\n\t        // Instead, we periodically shift 1024 tasks off the queue.\n\t        if (index > capacity) {\n\t            // Manually shift all values starting at the index back to the\n\t            // beginning of the queue.\n\t            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n\t                queue[scan] = queue[scan + index];\n\t            }\n\t            queue.length -= index;\n\t            index = 0;\n\t        }\n\t    }\n\t    queue.length = 0;\n\t    index = 0;\n\t    flushing = false;\n\t}\n\t\n\t// `requestFlush` is implemented using a strategy based on data collected from\n\t// every available SauceLabs Selenium web driver worker at time of writing.\n\t// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\t\n\t// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n\t// have WebKitMutationObserver but not un-prefixed MutationObserver.\n\t// Must use `global` or `self` instead of `window` to work in both frames and web\n\t// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\t\n\t/* globals self */\n\tvar scope = typeof global !== \"undefined\" ? global : self;\n\tvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\t\n\t// MutationObservers are desirable because they have high priority and work\n\t// reliably everywhere they are implemented.\n\t// They are implemented in all modern browsers.\n\t//\n\t// - Android 4-4.3\n\t// - Chrome 26-34\n\t// - Firefox 14-29\n\t// - Internet Explorer 11\n\t// - iPad Safari 6-7.1\n\t// - iPhone Safari 7-7.1\n\t// - Safari 6-7\n\tif (typeof BrowserMutationObserver === \"function\") {\n\t    requestFlush = makeRequestCallFromMutationObserver(flush);\n\t\n\t// MessageChannels are desirable because they give direct access to the HTML\n\t// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n\t// 11-12, and in web workers in many engines.\n\t// Although message channels yield to any queued rendering and IO tasks, they\n\t// would be better than imposing the 4ms delay of timers.\n\t// However, they do not work reliably in Internet Explorer or Safari.\n\t\n\t// Internet Explorer 10 is the only browser that has setImmediate but does\n\t// not have MutationObservers.\n\t// Although setImmediate yields to the browser's renderer, it would be\n\t// preferrable to falling back to setTimeout since it does not have\n\t// the minimum 4ms penalty.\n\t// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n\t// Desktop to a lesser extent) that renders both setImmediate and\n\t// MessageChannel useless for the purposes of ASAP.\n\t// https://github.com/kriskowal/q/issues/396\n\t\n\t// Timers are implemented universally.\n\t// We fall back to timers in workers in most engines, and in foreground\n\t// contexts in the following browsers.\n\t// However, note that even this simple case requires nuances to operate in a\n\t// broad spectrum of browsers.\n\t//\n\t// - Firefox 3-13\n\t// - Internet Explorer 6-9\n\t// - iPad Safari 4.3\n\t// - Lynx 2.8.7\n\t} else {\n\t    requestFlush = makeRequestCallFromTimer(flush);\n\t}\n\t\n\t// `requestFlush` requests that the high priority event queue be flushed as\n\t// soon as possible.\n\t// This is useful to prevent an error thrown in a task from stalling the event\n\t// queue if the exception handled by Node.js’s\n\t// `process.on(\"uncaughtException\")` or by a domain.\n\trawAsap.requestFlush = requestFlush;\n\t\n\t// To request a high priority event, we induce a mutation observer by toggling\n\t// the text of a text node between \"1\" and \"-1\".\n\tfunction makeRequestCallFromMutationObserver(callback) {\n\t    var toggle = 1;\n\t    var observer = new BrowserMutationObserver(callback);\n\t    var node = document.createTextNode(\"\");\n\t    observer.observe(node, {characterData: true});\n\t    return function requestCall() {\n\t        toggle = -toggle;\n\t        node.data = toggle;\n\t    };\n\t}\n\t\n\t// The message channel technique was discovered by Malte Ubl and was the\n\t// original foundation for this library.\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\n\t\n\t// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n\t// page's first load. Thankfully, this version of Safari supports\n\t// MutationObservers, so we don't need to fall back in that case.\n\t\n\t// function makeRequestCallFromMessageChannel(callback) {\n\t//     var channel = new MessageChannel();\n\t//     channel.port1.onmessage = callback;\n\t//     return function requestCall() {\n\t//         channel.port2.postMessage(0);\n\t//     };\n\t// }\n\t\n\t// For reasons explained above, we are also unable to use `setImmediate`\n\t// under any circumstances.\n\t// Even if we were, there is another bug in Internet Explorer 10.\n\t// It is not sufficient to assign `setImmediate` to `requestFlush` because\n\t// `setImmediate` must be called *by name* and therefore must be wrapped in a\n\t// closure.\n\t// Never forget.\n\t\n\t// function makeRequestCallFromSetImmediate(callback) {\n\t//     return function requestCall() {\n\t//         setImmediate(callback);\n\t//     };\n\t// }\n\t\n\t// Safari 6.0 has a problem where timers will get lost while the user is\n\t// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n\t// mutation observers, so that implementation is used instead.\n\t// However, if we ever elect to use timers in Safari, the prevalent work-around\n\t// is to add a scroll event listener that calls for a flush.\n\t\n\t// `setTimeout` does not call the passed callback if the delay is less than\n\t// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n\t// even then.\n\t\n\tfunction makeRequestCallFromTimer(callback) {\n\t    return function requestCall() {\n\t        // We dispatch a timeout with a specified delay of 0 for engines that\n\t        // can reliably accommodate that request. This will usually be snapped\n\t        // to a 4 milisecond delay, but once we're flushing, there's no delay\n\t        // between events.\n\t        var timeoutHandle = setTimeout(handleTimer, 0);\n\t        // However, since this timer gets frequently dropped in Firefox\n\t        // workers, we enlist an interval handle that will try to fire\n\t        // an event 20 times per second until it succeeds.\n\t        var intervalHandle = setInterval(handleTimer, 50);\n\t\n\t        function handleTimer() {\n\t            // Whichever timer succeeds will cancel both timers and\n\t            // execute the callback.\n\t            clearTimeout(timeoutHandle);\n\t            clearInterval(intervalHandle);\n\t            callback();\n\t        }\n\t    };\n\t}\n\t\n\t// This is for `asap.js` only.\n\t// Its name will be periodically randomized to break any code that depends on\n\t// its existence.\n\trawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\t\n\t// ASAP was originally a nextTick shim included in Q. This was factored out\n\t// into this ASAP package. It was later adapted to RSVP which made further\n\t// amendments. These decisions, particularly to marginalize MessageChannel and\n\t// to capture the MutationObserver implementation in a closure, were integrated\n\t// back into ASAP proper.\n\t// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(8);\n\t\n\tmodule.exports = function(parent, methods) {\n\t  if (typeof parent !== 'function') {\n\t    methods = parent;\n\t    parent  = Object;\n\t  }\n\t\n\t  var klass = function() {\n\t    if (!this.initialize) return this;\n\t    return this.initialize.apply(this, arguments) || this;\n\t  };\n\t\n\t  var bridge = function() {};\n\t  bridge.prototype = parent.prototype;\n\t\n\t  klass.prototype = new bridge();\n\t  extend(klass.prototype, methods);\n\t\n\t  return klass;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(dest, source, overwrite) {\n\t  if (!source) return dest;\n\t  for (var key in source) {\n\t    if (!source.hasOwnProperty(key)) continue;\n\t    if (dest.hasOwnProperty(key) && overwrite === false) continue;\n\t    if (dest[key] !== source[key])\n\t      dest[key] = source[key];\n\t  }\n\t  return dest;\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar asap = __webpack_require__(5);\n\t\n\tvar PENDING   = 0,\n\t    FULFILLED = 1,\n\t    REJECTED  = 2;\n\t\n\tvar RETURN = function(x) { return x },\n\t    THROW  = function(x) { throw  x };\n\t\n\tvar Promise = function(task) {\n\t  this._state       = PENDING;\n\t  this._onFulfilled = [];\n\t  this._onRejected  = [];\n\t\n\t  if (typeof task !== 'function') return;\n\t  var self = this;\n\t\n\t  task(function(value)  { resolve(self, value) },\n\t       function(reason) { reject(self, reason) });\n\t};\n\t\n\tPromise.prototype.then = function(onFulfilled, onRejected) {\n\t  var next = new Promise();\n\t  registerOnFulfilled(this, onFulfilled, next);\n\t  registerOnRejected(this, onRejected, next);\n\t  return next;\n\t};\n\t\n\tPromise.prototype['catch'] = function(onRejected) {\n\t  return this.then(null, onRejected);\n\t};\n\t\n\tvar registerOnFulfilled = function(promise, onFulfilled, next) {\n\t  if (typeof onFulfilled !== 'function') onFulfilled = RETURN;\n\t  var handler = function(value) { invoke(onFulfilled, value, next) };\n\t\n\t  if (promise._state === PENDING) {\n\t    promise._onFulfilled.push(handler);\n\t  } else if (promise._state === FULFILLED) {\n\t    handler(promise._value);\n\t  }\n\t};\n\t\n\tvar registerOnRejected = function(promise, onRejected, next) {\n\t  if (typeof onRejected !== 'function') onRejected = THROW;\n\t  var handler = function(reason) { invoke(onRejected, reason, next) };\n\t\n\t  if (promise._state === PENDING) {\n\t    promise._onRejected.push(handler);\n\t  } else if (promise._state === REJECTED) {\n\t    handler(promise._reason);\n\t  }\n\t};\n\t\n\tvar invoke = function(fn, value, next) {\n\t  asap(function() { _invoke(fn, value, next) });\n\t};\n\t\n\tvar _invoke = function(fn, value, next) {\n\t  var outcome;\n\t\n\t  try {\n\t    outcome = fn(value);\n\t  } catch (error) {\n\t    return reject(next, error);\n\t  }\n\t\n\t  if (outcome === next) {\n\t    reject(next, new TypeError('Recursive promise chain detected'));\n\t  } else {\n\t    resolve(next, outcome);\n\t  }\n\t};\n\t\n\tvar resolve = function(promise, value) {\n\t  var called = false, type, then;\n\t\n\t  try {\n\t    type = typeof value;\n\t    then = value !== null && (type === 'function' || type === 'object') && value.then;\n\t\n\t    if (typeof then !== 'function') return fulfill(promise, value);\n\t\n\t    then.call(value, function(v) {\n\t      if (!(called ^ (called = true))) return;\n\t      resolve(promise, v);\n\t    }, function(r) {\n\t      if (!(called ^ (called = true))) return;\n\t      reject(promise, r);\n\t    });\n\t  } catch (error) {\n\t    if (!(called ^ (called = true))) return;\n\t    reject(promise, error);\n\t  }\n\t};\n\t\n\tvar fulfill = function(promise, value) {\n\t  if (promise._state !== PENDING) return;\n\t\n\t  promise._state      = FULFILLED;\n\t  promise._value      = value;\n\t  promise._onRejected = [];\n\t\n\t  var onFulfilled = promise._onFulfilled, fn;\n\t  while (fn = onFulfilled.shift()) fn(value);\n\t};\n\t\n\tvar reject = function(promise, reason) {\n\t  if (promise._state !== PENDING) return;\n\t\n\t  promise._state       = REJECTED;\n\t  promise._reason      = reason;\n\t  promise._onFulfilled = [];\n\t\n\t  var onRejected = promise._onRejected, fn;\n\t  while (fn = onRejected.shift()) fn(reason);\n\t};\n\t\n\tPromise.resolve = function(value) {\n\t  return new Promise(function(resolve, reject) { resolve(value) });\n\t};\n\t\n\tPromise.reject = function(reason) {\n\t  return new Promise(function(resolve, reject) { reject(reason) });\n\t};\n\t\n\tPromise.all = function(promises) {\n\t  return new Promise(function(resolve, reject) {\n\t    var list = [], n = promises.length, i;\n\t\n\t    if (n === 0) return resolve(list);\n\t\n\t    for (i = 0; i < n; i++) (function(promise, i) {\n\t      Promise.resolve(promise).then(function(value) {\n\t        list[i] = value;\n\t        if (--n === 0) resolve(list);\n\t      }, reject);\n\t    })(promises[i], i);\n\t  });\n\t};\n\t\n\tPromise.race = function(promises) {\n\t  return new Promise(function(resolve, reject) {\n\t    for (var i = 0, n = promises.length; i < n; i++)\n\t      Promise.resolve(promises[i]).then(resolve, reject);\n\t  });\n\t};\n\t\n\tPromise.deferred = Promise.pending = function() {\n\t  var tuple = {};\n\t\n\t  tuple.promise = new Promise(function(resolve, reject) {\n\t    tuple.resolve = resolve;\n\t    tuple.reject  = reject;\n\t  });\n\t  return tuple;\n\t};\n\t\n\tmodule.exports = Promise;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  isURI: function(uri) {\n\t    return uri && uri.protocol && uri.host && uri.path;\n\t  },\n\t\n\t  isSameOrigin: function(uri) {\n\t    return uri.protocol === location.protocol &&\n\t           uri.hostname === location.hostname &&\n\t           uri.port     === location.port;\n\t  },\n\t\n\t  parse: function(url) {\n\t    if (typeof url !== 'string') return url;\n\t    var uri = {}, parts, query, pairs, i, n, data;\n\t\n\t    var consume = function(name, pattern) {\n\t      url = url.replace(pattern, function(match) {\n\t        uri[name] = match;\n\t        return '';\n\t      });\n\t      uri[name] = uri[name] || '';\n\t    };\n\t\n\t    consume('protocol', /^[a-z]+\\:/i);\n\t    consume('host',     /^\\/\\/[^\\/\\?#]+/);\n\t\n\t    if (!/^\\//.test(url) && !uri.host)\n\t      url = location.pathname.replace(/[^\\/]*$/, '') + url;\n\t\n\t    consume('pathname', /^[^\\?#]*/);\n\t    consume('search',   /^\\?[^#]*/);\n\t    consume('hash',     /^#.*/);\n\t\n\t    uri.protocol = uri.protocol || location.protocol;\n\t\n\t    if (uri.host) {\n\t      uri.host     = uri.host.substr(2);\n\t      parts        = uri.host.split(':');\n\t      uri.hostname = parts[0];\n\t      uri.port     = parts[1] || '';\n\t    } else {\n\t      uri.host     = location.host;\n\t      uri.hostname = location.hostname;\n\t      uri.port     = location.port;\n\t    }\n\t\n\t    uri.pathname = uri.pathname || '/';\n\t    uri.path = uri.pathname + uri.search;\n\t\n\t    query = uri.search.replace(/^\\?/, '');\n\t    pairs = query ? query.split('&') : [];\n\t    data  = {};\n\t\n\t    for (i = 0, n = pairs.length; i < n; i++) {\n\t      parts = pairs[i].split('=');\n\t      data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');\n\t    }\n\t\n\t    uri.query = data;\n\t\n\t    uri.href = this.stringify(uri);\n\t    return uri;\n\t  },\n\t\n\t  stringify: function(uri) {\n\t    var string = uri.protocol + '//' + uri.hostname;\n\t    if (uri.port) string += ':' + uri.port;\n\t    string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');\n\t    return string;\n\t  },\n\t\n\t  queryString: function(query) {\n\t    var pairs = [];\n\t    for (var key in query) {\n\t      if (!query.hasOwnProperty(key)) continue;\n\t      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));\n\t    }\n\t    if (pairs.length === 0) return '';\n\t    return '?' + pairs.join('&');\n\t  }\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  commonElement: function(lista, listb) {\n\t    for (var i = 0, n = lista.length; i < n; i++) {\n\t      if (this.indexOf(listb, lista[i]) !== -1)\n\t        return lista[i];\n\t    }\n\t    return null;\n\t  },\n\t\n\t  indexOf: function(list, needle) {\n\t    if (list.indexOf) return list.indexOf(needle);\n\t\n\t    for (var i = 0, n = list.length; i < n; i++) {\n\t      if (list[i] === needle) return i;\n\t    }\n\t    return -1;\n\t  },\n\t\n\t  map: function(object, callback, context) {\n\t    if (object.map) return object.map(callback, context);\n\t    var result = [];\n\t\n\t    if (object instanceof Array) {\n\t      for (var i = 0, n = object.length; i < n; i++) {\n\t        result.push(callback.call(context || null, object[i], i));\n\t      }\n\t    } else {\n\t      for (var key in object) {\n\t        if (!object.hasOwnProperty(key)) continue;\n\t        result.push(callback.call(context || null, key, object[key]));\n\t      }\n\t    }\n\t    return result;\n\t  },\n\t\n\t  filter: function(array, callback, context) {\n\t    if (array.filter) return array.filter(callback, context);\n\t    var result = [];\n\t    for (var i = 0, n = array.length; i < n; i++) {\n\t      if (callback.call(context || null, array[i], i))\n\t        result.push(array[i]);\n\t    }\n\t    return result;\n\t  },\n\t\n\t  asyncEach: function(list, iterator, callback, context) {\n\t    var n       = list.length,\n\t        i       = -1,\n\t        calls   = 0,\n\t        looping = false;\n\t\n\t    var iterate = function() {\n\t      calls -= 1;\n\t      i += 1;\n\t      if (i === n) return callback && callback.call(context);\n\t      iterator(list[i], resume);\n\t    };\n\t\n\t    var loop = function() {\n\t      if (looping) return;\n\t      looping = true;\n\t      while (calls > 0) iterate();\n\t      looping = false;\n\t    };\n\t\n\t    var resume = function() {\n\t      calls += 1;\n\t      loop();\n\t    };\n\t    resume();\n\t  }\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Event = {\n\t  _registry: [],\n\t\n\t  on: function(element, eventName, callback, context) {\n\t    var wrapped = function() { callback.call(context) };\n\t\n\t    if (element.addEventListener)\n\t      element.addEventListener(eventName, wrapped, false);\n\t    else\n\t      element.attachEvent('on' + eventName, wrapped);\n\t\n\t    this._registry.push({\n\t      _element:   element,\n\t      _type:      eventName,\n\t      _callback:  callback,\n\t      _context:     context,\n\t      _handler:   wrapped\n\t    });\n\t  },\n\t\n\t  detach: function(element, eventName, callback, context) {\n\t    var i = this._registry.length, register;\n\t    while (i--) {\n\t      register = this._registry[i];\n\t\n\t      if ((element    && element    !== register._element)  ||\n\t          (eventName  && eventName  !== register._type)     ||\n\t          (callback   && callback   !== register._callback) ||\n\t          (context    && context    !== register._context))\n\t        continue;\n\t\n\t      if (register._element.removeEventListener)\n\t        register._element.removeEventListener(register._type, register._handler, false);\n\t      else\n\t        register._element.detachEvent('on' + register._type, register._handler);\n\t\n\t      this._registry.splice(i,1);\n\t      register = null;\n\t    }\n\t  }\n\t};\n\t\n\tif (global.onunload !== undefined)\n\t  Event.on(global, 'unload', Event.detach, Event);\n\t\n\tmodule.exports = {\n\t  Event: Event\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar array = __webpack_require__(11);\n\t\n\tmodule.exports = function(options, validKeys) {\n\t  for (var key in options) {\n\t    if (array.indexOf(validKeys, key) < 0)\n\t      throw new Error('Unrecognized option: ' + key);\n\t  }\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Promise   = __webpack_require__(9);\n\t\n\tmodule.exports = {\n\t  then: function(callback, errback) {\n\t    var self = this;\n\t    if (!this._promise)\n\t      this._promise = new Promise(function(resolve, reject) {\n\t        self._resolve = resolve;\n\t        self._reject  = reject;\n\t      });\n\t\n\t    if (arguments.length === 0)\n\t      return this._promise;\n\t    else\n\t      return this._promise.then(callback, errback);\n\t  },\n\t\n\t  callback: function(callback, context) {\n\t    return this.then(function(value) { callback.call(context, value) });\n\t  },\n\t\n\t  errback: function(callback, context) {\n\t    return this.then(null, function(reason) { callback.call(context, reason) });\n\t  },\n\t\n\t  timeout: function(seconds, message) {\n\t    this.then();\n\t    var self = this;\n\t    this._timer = global.setTimeout(function() {\n\t      self._reject(message);\n\t    }, seconds * 1000);\n\t  },\n\t\n\t  setDeferredStatus: function(status, value) {\n\t    if (this._timer) global.clearTimeout(this._timer);\n\t\n\t    this.then();\n\t\n\t    if (status === 'succeeded')\n\t      this._resolve(value);\n\t    else if (status === 'failed')\n\t      this._reject(value);\n\t    else\n\t      delete this._promise;\n\t  }\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend       = __webpack_require__(8),\n\t    EventEmitter = __webpack_require__(16);\n\t\n\tvar Publisher = {\n\t  countListeners: function(eventType) {\n\t    return this.listeners(eventType).length;\n\t  },\n\t\n\t  bind: function(eventType, listener, context) {\n\t    var slice   = Array.prototype.slice,\n\t        handler = function() { listener.apply(context, slice.call(arguments)) };\n\t\n\t    this._listeners = this._listeners || [];\n\t    this._listeners.push([eventType, listener, context, handler]);\n\t    return this.on(eventType, handler);\n\t  },\n\t\n\t  unbind: function(eventType, listener, context) {\n\t    this._listeners = this._listeners || [];\n\t    var n = this._listeners.length, tuple;\n\t\n\t    while (n--) {\n\t      tuple = this._listeners[n];\n\t      if (tuple[0] !== eventType) continue;\n\t      if (listener && (tuple[1] !== listener || tuple[2] !== context)) continue;\n\t      this._listeners.splice(n, 1);\n\t      this.removeListener(eventType, tuple[3]);\n\t    }\n\t  }\n\t};\n\t\n\textend(Publisher, EventEmitter.prototype);\n\tPublisher.trigger = Publisher.emit;\n\t\n\tmodule.exports = Publisher;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t/*\n\tCopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\t*/\n\t\n\tvar isArray = typeof Array.isArray === 'function'\n\t    ? Array.isArray\n\t    : function (xs) {\n\t        return Object.prototype.toString.call(xs) === '[object Array]'\n\t    }\n\t;\n\tfunction indexOf (xs, x) {\n\t    if (xs.indexOf) return xs.indexOf(x);\n\t    for (var i = 0; i < xs.length; i++) {\n\t        if (x === xs[i]) return i;\n\t    }\n\t    return -1;\n\t}\n\t\n\tfunction EventEmitter() {}\n\tmodule.exports = EventEmitter;\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events || !this._events.error ||\n\t        (isArray(this._events.error) && !this._events.error.length))\n\t    {\n\t      if (arguments[1] instanceof Error) {\n\t        throw arguments[1]; // Unhandled 'error' event\n\t      } else {\n\t        throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t      }\n\t      return false;\n\t    }\n\t  }\n\t\n\t  if (!this._events) return false;\n\t  var handler = this._events[type];\n\t  if (!handler) return false;\n\t\n\t  if (typeof handler == 'function') {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t    return true;\n\t\n\t  } else if (isArray(handler)) {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t\n\t    var listeners = handler.slice();\n\t    for (var i = 0, l = listeners.length; i < l; i++) {\n\t      listeners[i].apply(this, args);\n\t    }\n\t    return true;\n\t\n\t  } else {\n\t    return false;\n\t  }\n\t};\n\t\n\t// EventEmitter is defined in src/node_events.cc\n\t// EventEmitter.prototype.emit() is also defined there.\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  if ('function' !== typeof listener) {\n\t    throw new Error('addListener only takes instances of Function');\n\t  }\n\t\n\t  if (!this._events) this._events = {};\n\t\n\t  // To avoid recursion in the case that type == \"newListeners\"! Before\n\t  // adding it to the listeners, first emit \"newListeners\".\n\t  this.emit('newListener', type, listener);\n\t\n\t  if (!this._events[type]) {\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  } else if (isArray(this._events[type])) {\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  } else {\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  var self = this;\n\t  self.on(type, function g() {\n\t    self.removeListener(type, g);\n\t    listener.apply(this, arguments);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  if ('function' !== typeof listener) {\n\t    throw new Error('removeListener only takes instances of Function');\n\t  }\n\t\n\t  // does not use listeners(), so no side effect of creating _events[type]\n\t  if (!this._events || !this._events[type]) return this;\n\t\n\t  var list = this._events[type];\n\t\n\t  if (isArray(list)) {\n\t    var i = indexOf(list, listener);\n\t    if (i < 0) return this;\n\t    list.splice(i, 1);\n\t    if (list.length == 0)\n\t      delete this._events[type];\n\t  } else if (this._events[type] === listener) {\n\t    delete this._events[type];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  if (arguments.length === 0) {\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  // does not use listeners(), so no side effect of creating _events[type]\n\t  if (type && this._events && this._events[type]) this._events[type] = null;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  if (!this._events) this._events = {};\n\t  if (!this._events[type]) this._events[type] = [];\n\t  if (!isArray(this._events[type])) {\n\t    this._events[type] = [this._events[type]];\n\t  }\n\t  return this._events[type];\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class     = __webpack_require__(7),\n\t    extend    = __webpack_require__(8),\n\t    Publisher = __webpack_require__(15),\n\t    Grammar   = __webpack_require__(18);\n\t\n\tvar Channel = Class({\n\t  initialize: function(name) {\n\t    this.id = this.name = name;\n\t  },\n\t\n\t  push: function(message) {\n\t    this.trigger('message', message);\n\t  },\n\t\n\t  isUnused: function() {\n\t    return this.countListeners('message') === 0;\n\t  }\n\t});\n\t\n\textend(Channel.prototype, Publisher);\n\t\n\textend(Channel, {\n\t  HANDSHAKE:    '/meta/handshake',\n\t  CONNECT:      '/meta/connect',\n\t  SUBSCRIBE:    '/meta/subscribe',\n\t  UNSUBSCRIBE:  '/meta/unsubscribe',\n\t  DISCONNECT:   '/meta/disconnect',\n\t\n\t  META:         'meta',\n\t  SERVICE:      'service',\n\t\n\t  expand: function(name) {\n\t    var segments = this.parse(name),\n\t        channels = ['/**', name];\n\t\n\t    var copy = segments.slice();\n\t    copy[copy.length - 1] = '*';\n\t    channels.push(this.unparse(copy));\n\t\n\t    for (var i = 1, n = segments.length; i < n; i++) {\n\t      copy = segments.slice(0, i);\n\t      copy.push('**');\n\t      channels.push(this.unparse(copy));\n\t    }\n\t\n\t    return channels;\n\t  },\n\t\n\t  isValid: function(name) {\n\t    return Grammar.CHANNEL_NAME.test(name) ||\n\t           Grammar.CHANNEL_PATTERN.test(name);\n\t  },\n\t\n\t  parse: function(name) {\n\t    if (!this.isValid(name)) return null;\n\t    return name.split('/').slice(1);\n\t  },\n\t\n\t  unparse: function(segments) {\n\t    return '/' + segments.join('/');\n\t  },\n\t\n\t  isMeta: function(name) {\n\t    var segments = this.parse(name);\n\t    return segments ? (segments[0] === this.META) : null;\n\t  },\n\t\n\t  isService: function(name) {\n\t    var segments = this.parse(name);\n\t    return segments ? (segments[0] === this.SERVICE) : null;\n\t  },\n\t\n\t  isSubscribable: function(name) {\n\t    if (!this.isValid(name)) return null;\n\t    return !this.isMeta(name) && !this.isService(name);\n\t  },\n\t\n\t  Set: Class({\n\t    initialize: function() {\n\t      this._channels = {};\n\t    },\n\t\n\t    getKeys: function() {\n\t      var keys = [];\n\t      for (var key in this._channels) keys.push(key);\n\t      return keys;\n\t    },\n\t\n\t    remove: function(name) {\n\t      delete this._channels[name];\n\t    },\n\t\n\t    hasSubscription: function(name) {\n\t      return this._channels.hasOwnProperty(name);\n\t    },\n\t\n\t    subscribe: function(names, subscription) {\n\t      var name;\n\t      for (var i = 0, n = names.length; i < n; i++) {\n\t        name = names[i];\n\t        var channel = this._channels[name] = this._channels[name] || new Channel(name);\n\t        channel.bind('message', subscription);\n\t      }\n\t    },\n\t\n\t    unsubscribe: function(name, subscription) {\n\t      var channel = this._channels[name];\n\t      if (!channel) return false;\n\t      channel.unbind('message', subscription);\n\t\n\t      if (channel.isUnused()) {\n\t        this.remove(name);\n\t        return true;\n\t      } else {\n\t        return false;\n\t      }\n\t    },\n\t\n\t    distributeMessage: function(message) {\n\t      var channels = Channel.expand(message.channel);\n\t\n\t      for (var i = 0, n = channels.length; i < n; i++) {\n\t        var channel = this._channels[channels[i]];\n\t        if (channel) channel.trigger('message', message);\n\t      }\n\t    }\n\t  })\n\t});\n\t\n\tmodule.exports = Channel;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  CHANNEL_NAME:     /^\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+(\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+)*$/,\n\t  CHANNEL_PATTERN:  /^(\\/(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)))+)*\\/\\*{1,2}$/,\n\t  ERROR:            /^([0-9][0-9][0-9]:(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*(,(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*)*:(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*|[0-9][0-9][0-9]::(((([a-z]|[A-Z])|[0-9])|(\\-|\\_|\\!|\\~|\\(|\\)|\\$|\\@)| |\\/|\\*|\\.))*)$/,\n\t  VERSION:          /^([0-9])+(\\.(([a-z]|[A-Z])|[0-9])(((([a-z]|[A-Z])|[0-9])|\\-|\\_))*)*$/\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class     = __webpack_require__(7),\n\t    URI       = __webpack_require__(10),\n\t    cookies   = __webpack_require__(20),\n\t    extend    = __webpack_require__(8),\n\t    Logging   = __webpack_require__(2),\n\t    Publisher = __webpack_require__(15),\n\t    Transport = __webpack_require__(21),\n\t    Scheduler = __webpack_require__(32);\n\t\n\tvar Dispatcher = Class({ className: 'Dispatcher',\n\t  MAX_REQUEST_SIZE: 2048,\n\t  DEFAULT_RETRY:    5,\n\t\n\t  UP:   1,\n\t  DOWN: 2,\n\t\n\t  initialize: function(client, endpoint, options) {\n\t    this._client     = client;\n\t    this.endpoint    = URI.parse(endpoint);\n\t    this._alternates = options.endpoints || {};\n\t\n\t    this.cookies      = cookies.CookieJar && new cookies.CookieJar();\n\t    this._disabled    = [];\n\t    this._envelopes   = {};\n\t    this.headers      = {};\n\t    this.retry        = options.retry || this.DEFAULT_RETRY;\n\t    this._scheduler   = options.scheduler || Scheduler;\n\t    this._state       = 0;\n\t    this.transports   = {};\n\t    this.wsExtensions = [];\n\t\n\t    this.proxy = options.proxy || {};\n\t    if (typeof this._proxy === 'string') this._proxy = {origin: this._proxy};\n\t\n\t    var exts = options.websocketExtensions;\n\t    if (exts) {\n\t      exts = [].concat(exts);\n\t      for (var i = 0, n = exts.length; i < n; i++)\n\t        this.addWebsocketExtension(exts[i]);\n\t    }\n\t\n\t    this.tls = options.tls || {};\n\t    this.tls.ca = this.tls.ca || options.ca;\n\t\n\t    for (var type in this._alternates)\n\t      this._alternates[type] = URI.parse(this._alternates[type]);\n\t\n\t    this.maxRequestSize = this.MAX_REQUEST_SIZE;\n\t  },\n\t\n\t  endpointFor: function(connectionType) {\n\t    return this._alternates[connectionType] || this.endpoint;\n\t  },\n\t\n\t  addWebsocketExtension: function(extension) {\n\t    this.wsExtensions.push(extension);\n\t  },\n\t\n\t  disable: function(feature) {\n\t    this._disabled.push(feature);\n\t  },\n\t\n\t  setHeader: function(name, value) {\n\t    this.headers[name] = value;\n\t  },\n\t\n\t  close: function() {\n\t    var transport = this._transport;\n\t    delete this._transport;\n\t    if (transport) transport.close();\n\t  },\n\t\n\t  getConnectionTypes: function() {\n\t    return Transport.getConnectionTypes();\n\t  },\n\t\n\t  selectTransport: function(transportTypes) {\n\t    Transport.get(this, transportTypes, this._disabled, function(transport) {\n\t      this.debug('Selected ? transport for ?', transport.connectionType, URI.stringify(transport.endpoint));\n\t\n\t      if (transport === this._transport) return;\n\t      if (this._transport) this._transport.close();\n\t\n\t      this._transport = transport;\n\t      this.connectionType = transport.connectionType;\n\t    }, this);\n\t  },\n\t\n\t  sendMessage: function(message, timeout, options) {\n\t    options = options || {};\n\t\n\t    var id       = message.id,\n\t        attempts = options.attempts,\n\t        deadline = options.deadline && new Date().getTime() + (options.deadline * 1000),\n\t        envelope = this._envelopes[id],\n\t        scheduler;\n\t\n\t    if (!envelope) {\n\t      scheduler = new this._scheduler(message, {timeout: timeout, interval: this.retry, attempts: attempts, deadline: deadline});\n\t      envelope  = this._envelopes[id] = {message: message, scheduler: scheduler};\n\t    }\n\t\n\t    this._sendEnvelope(envelope);\n\t  },\n\t\n\t  _sendEnvelope: function(envelope) {\n\t    if (!this._transport) return;\n\t    if (envelope.request || envelope.timer) return;\n\t\n\t    var message   = envelope.message,\n\t        scheduler = envelope.scheduler,\n\t        self      = this;\n\t\n\t    if (!scheduler.isDeliverable()) {\n\t      scheduler.abort();\n\t      delete this._envelopes[message.id];\n\t      return;\n\t    }\n\t\n\t    envelope.timer = global.setTimeout(function() {\n\t      self.handleError(message);\n\t    }, scheduler.getTimeout() * 1000);\n\t\n\t    scheduler.send();\n\t    envelope.request = this._transport.sendMessage(message);\n\t  },\n\t\n\t  handleResponse: function(reply) {\n\t    var envelope = this._envelopes[reply.id];\n\t\n\t    if (reply.successful !== undefined && envelope) {\n\t      envelope.scheduler.succeed();\n\t      delete this._envelopes[reply.id];\n\t      global.clearTimeout(envelope.timer);\n\t    }\n\t\n\t    this.trigger('message', reply);\n\t\n\t    if (this._state === this.UP) return;\n\t    this._state = this.UP;\n\t    this._client.trigger('transport:up');\n\t  },\n\t\n\t  handleError: function(message, immediate) {\n\t    var envelope = this._envelopes[message.id],\n\t        request  = envelope && envelope.request,\n\t        self     = this;\n\t\n\t    if (!request) return;\n\t\n\t    request.then(function(req) {\n\t      if (req && req.abort) req.abort();\n\t    });\n\t\n\t    var scheduler = envelope.scheduler;\n\t    scheduler.fail();\n\t\n\t    global.clearTimeout(envelope.timer);\n\t    envelope.request = envelope.timer = null;\n\t\n\t    if (immediate) {\n\t      this._sendEnvelope(envelope);\n\t    } else {\n\t      envelope.timer = global.setTimeout(function() {\n\t        envelope.timer = null;\n\t        self._sendEnvelope(envelope);\n\t      }, scheduler.getInterval() * 1000);\n\t    }\n\t\n\t    if (this._state === this.DOWN) return;\n\t    this._state = this.DOWN;\n\t    this._client.trigger('transport:down');\n\t  }\n\t});\n\t\n\tDispatcher.create = function(client, endpoint, options) {\n\t  return new Dispatcher(client, endpoint, options);\n\t};\n\t\n\textend(Dispatcher.prototype, Publisher);\n\textend(Dispatcher.prototype, Logging);\n\t\n\tmodule.exports = Dispatcher;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Transport = __webpack_require__(22);\n\t\n\tTransport.register('websocket', __webpack_require__(24));\n\tTransport.register('eventsource', __webpack_require__(28));\n\tTransport.register('long-polling', __webpack_require__(29));\n\tTransport.register('cross-origin-long-polling', __webpack_require__(30));\n\tTransport.register('callback-polling', __webpack_require__(31));\n\t\n\tmodule.exports = Transport;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class    = __webpack_require__(7),\n\t    Cookie   = __webpack_require__(20).Cookie,\n\t    Promise  = __webpack_require__(9),\n\t    URI      = __webpack_require__(10),\n\t    array    = __webpack_require__(11),\n\t    extend   = __webpack_require__(8),\n\t    Logging  = __webpack_require__(2),\n\t    Timeouts = __webpack_require__(23),\n\t    Channel  = __webpack_require__(17);\n\t\n\tvar Transport = extend(Class({ className: 'Transport',\n\t  DEFAULT_PORTS: {'http:': 80, 'https:': 443, 'ws:': 80, 'wss:': 443},\n\t  MAX_DELAY:     0,\n\t\n\t  batching:  true,\n\t\n\t  initialize: function(dispatcher, endpoint) {\n\t    this._dispatcher = dispatcher;\n\t    this.endpoint    = endpoint;\n\t    this._outbox     = [];\n\t    this._proxy      = extend({}, this._dispatcher.proxy);\n\t\n\t    if (!this._proxy.origin)\n\t      this._proxy.origin = this._findProxy();\n\t  },\n\t\n\t  close: function() {},\n\t\n\t  encode: function(messages) {\n\t    return '';\n\t  },\n\t\n\t  sendMessage: function(message) {\n\t    this.debug('Client ? sending message to ?: ?',\n\t               this._dispatcher.clientId, URI.stringify(this.endpoint), message);\n\t\n\t    if (!this.batching) return Promise.resolve(this.request([message]));\n\t\n\t    this._outbox.push(message);\n\t    this._flushLargeBatch();\n\t\n\t    if (message.channel === Channel.HANDSHAKE)\n\t      return this._publish(0.01);\n\t\n\t    if (message.channel === Channel.CONNECT)\n\t      this._connectMessage = message;\n\t\n\t    return this._publish(this.MAX_DELAY);\n\t  },\n\t\n\t  _makePromise: function() {\n\t    var self = this;\n\t\n\t    this._requestPromise = this._requestPromise || new Promise(function(resolve) {\n\t      self._resolvePromise = resolve;\n\t    });\n\t  },\n\t\n\t  _publish: function(delay) {\n\t    this._makePromise();\n\t\n\t    this.addTimeout('publish', delay, function() {\n\t      this._flush();\n\t      delete this._requestPromise;\n\t    }, this);\n\t\n\t    return this._requestPromise;\n\t  },\n\t\n\t  _flush: function() {\n\t    this.removeTimeout('publish');\n\t\n\t    if (this._outbox.length > 1 && this._connectMessage)\n\t      this._connectMessage.advice = {timeout: 0};\n\t\n\t    this._resolvePromise(this.request(this._outbox));\n\t\n\t    this._connectMessage = null;\n\t    this._outbox = [];\n\t  },\n\t\n\t  _flushLargeBatch: function() {\n\t    var string = this.encode(this._outbox);\n\t    if (string.length < this._dispatcher.maxRequestSize) return;\n\t    var last = this._outbox.pop();\n\t\n\t    this._makePromise();\n\t    this._flush();\n\t\n\t    if (last) this._outbox.push(last);\n\t  },\n\t\n\t  _receive: function(replies) {\n\t    if (!replies) return;\n\t    replies = [].concat(replies);\n\t\n\t    this.debug('Client ? received from ? via ?: ?',\n\t               this._dispatcher.clientId, URI.stringify(this.endpoint), this.connectionType, replies);\n\t\n\t    for (var i = 0, n = replies.length; i < n; i++)\n\t      this._dispatcher.handleResponse(replies[i]);\n\t  },\n\t\n\t  _handleError: function(messages, immediate) {\n\t    messages = [].concat(messages);\n\t\n\t    this.debug('Client ? failed to send to ? via ?: ?',\n\t               this._dispatcher.clientId, URI.stringify(this.endpoint), this.connectionType, messages);\n\t\n\t    for (var i = 0, n = messages.length; i < n; i++)\n\t      this._dispatcher.handleError(messages[i]);\n\t  },\n\t\n\t  _getCookies: function() {\n\t    var cookies = this._dispatcher.cookies,\n\t        url     = URI.stringify(this.endpoint);\n\t\n\t    if (!cookies) return '';\n\t\n\t    return array.map(cookies.getCookiesSync(url), function(cookie) {\n\t      return cookie.cookieString();\n\t    }).join('; ');\n\t  },\n\t\n\t  _storeCookies: function(setCookie) {\n\t    var cookies = this._dispatcher.cookies,\n\t        url     = URI.stringify(this.endpoint),\n\t        cookie;\n\t\n\t    if (!setCookie || !cookies) return;\n\t    setCookie = [].concat(setCookie);\n\t\n\t    for (var i = 0, n = setCookie.length; i < n; i++) {\n\t      cookie = Cookie.parse(setCookie[i]);\n\t      cookies.setCookieSync(cookie, url);\n\t    }\n\t  },\n\t\n\t  _findProxy: function() {\n\t    if (typeof process === 'undefined') return undefined;\n\t\n\t    var protocol = this.endpoint.protocol;\n\t    if (!protocol) return undefined;\n\t\n\t    var name   = protocol.replace(/:$/, '').toLowerCase() + '_proxy',\n\t        upcase = name.toUpperCase(),\n\t        env    = process.env,\n\t        keys, proxy;\n\t\n\t    if (name === 'http_proxy' && env.REQUEST_METHOD) {\n\t      keys = Object.keys(env).filter(function(k) { return /^http_proxy$/i.test(k) });\n\t      if (keys.length === 1) {\n\t        if (keys[0] === name && env[upcase] === undefined)\n\t          proxy = env[name];\n\t      } else if (keys.length > 1) {\n\t        proxy = env[name];\n\t      }\n\t      proxy = proxy || env['CGI_' + upcase];\n\t    } else {\n\t      proxy = env[name] || env[upcase];\n\t      if (proxy && !env[name])\n\t        console.warn('The environment variable ' + upcase +\n\t                     ' is discouraged. Use ' + name + '.');\n\t    }\n\t    return proxy;\n\t  }\n\t\n\t}), {\n\t  get: function(dispatcher, allowed, disabled, callback, context) {\n\t    var endpoint = dispatcher.endpoint;\n\t\n\t    array.asyncEach(this._transports, function(pair, resume) {\n\t      var connType     = pair[0], klass = pair[1],\n\t          connEndpoint = dispatcher.endpointFor(connType);\n\t\n\t      if (array.indexOf(disabled, connType) >= 0)\n\t        return resume();\n\t\n\t      if (array.indexOf(allowed, connType) < 0) {\n\t        klass.isUsable(dispatcher, connEndpoint, function() {});\n\t        return resume();\n\t      }\n\t\n\t      klass.isUsable(dispatcher, connEndpoint, function(isUsable) {\n\t        if (!isUsable) return resume();\n\t        var transport = klass.hasOwnProperty('create') ? klass.create(dispatcher, connEndpoint) : new klass(dispatcher, connEndpoint);\n\t        callback.call(context, transport);\n\t      });\n\t    }, function() {\n\t      throw new Error('Could not find a usable connection type for ' + URI.stringify(endpoint));\n\t    });\n\t  },\n\t\n\t  register: function(type, klass) {\n\t    this._transports.push([type, klass]);\n\t    klass.prototype.connectionType = type;\n\t  },\n\t\n\t  getConnectionTypes: function() {\n\t    return array.map(this._transports, function(t) { return t[0] });\n\t  },\n\t\n\t  _transports: []\n\t});\n\t\n\textend(Transport.prototype, Logging);\n\textend(Transport.prototype, Timeouts);\n\t\n\tmodule.exports = Transport;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tmodule.exports = {\n\t  addTimeout: function(name, delay, callback, context) {\n\t    this._timeouts = this._timeouts || {};\n\t    if (this._timeouts.hasOwnProperty(name)) return;\n\t    var self = this;\n\t    this._timeouts[name] = global.setTimeout(function() {\n\t      delete self._timeouts[name];\n\t      callback.call(context);\n\t    }, 1000 * delay);\n\t  },\n\t\n\t  removeTimeout: function(name) {\n\t    this._timeouts = this._timeouts || {};\n\t    var timeout = this._timeouts[name];\n\t    if (!timeout) return;\n\t    global.clearTimeout(timeout);\n\t    delete this._timeouts[name];\n\t  },\n\t\n\t  removeAllTimeouts: function() {\n\t    this._timeouts = this._timeouts || {};\n\t    for (var name in this._timeouts) this.removeTimeout(name);\n\t  }\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class      = __webpack_require__(7),\n\t    Promise    = __webpack_require__(9),\n\t    Set        = __webpack_require__(25),\n\t    URI        = __webpack_require__(10),\n\t    browser    = __webpack_require__(12),\n\t    copyObject = __webpack_require__(26),\n\t    extend     = __webpack_require__(8),\n\t    toJSON     = __webpack_require__(3),\n\t    ws         = __webpack_require__(27),\n\t    Deferrable = __webpack_require__(14),\n\t    Transport  = __webpack_require__(22);\n\t\n\tvar WebSocket = extend(Class(Transport, {\n\t  UNCONNECTED:  1,\n\t  CONNECTING:   2,\n\t  CONNECTED:    3,\n\t\n\t  batching:     false,\n\t\n\t  isUsable: function(callback, context) {\n\t    this.callback(function() { callback.call(context, true) });\n\t    this.errback(function() { callback.call(context, false) });\n\t    this.connect();\n\t  },\n\t\n\t  request: function(messages) {\n\t    this._pending = this._pending || new Set();\n\t    for (var i = 0, n = messages.length; i < n; i++) this._pending.add(messages[i]);\n\t\n\t    var self = this;\n\t\n\t    var promise = new Promise(function(resolve, reject) {\n\t      self.callback(function(socket) {\n\t        if (!socket || socket.readyState !== 1) return;\n\t        socket.send(toJSON(messages));\n\t        resolve(socket);\n\t      });\n\t\n\t      self.connect();\n\t    });\n\t\n\t    return {\n\t      abort: function() { promise.then(function(ws) { ws.close() }) }\n\t    };\n\t  },\n\t\n\t  connect: function() {\n\t    if (WebSocket._unloaded) return;\n\t\n\t    this._state = this._state || this.UNCONNECTED;\n\t    if (this._state !== this.UNCONNECTED) return;\n\t    this._state = this.CONNECTING;\n\t\n\t    var socket = this._createSocket();\n\t    if (!socket) return this.setDeferredStatus('failed');\n\t\n\t    var self = this;\n\t\n\t    socket.onopen = function() {\n\t      if (socket.headers) self._storeCookies(socket.headers['set-cookie']);\n\t      self._socket = socket;\n\t      self._state = self.CONNECTED;\n\t      self._everConnected = true;\n\t      self._ping();\n\t      self.setDeferredStatus('succeeded', socket);\n\t    };\n\t\n\t    var closed = false;\n\t    socket.onclose = socket.onerror = function() {\n\t      if (closed) return;\n\t      closed = true;\n\t\n\t      var wasConnected = (self._state === self.CONNECTED);\n\t      socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;\n\t\n\t      delete self._socket;\n\t      self._state = self.UNCONNECTED;\n\t      self.removeTimeout('ping');\n\t\n\t      var pending = self._pending ? self._pending.toArray() : [];\n\t      delete self._pending;\n\t\n\t      if (wasConnected || self._everConnected) {\n\t        self.setDeferredStatus('unknown');\n\t        self._handleError(pending, wasConnected);\n\t      } else {\n\t        self.setDeferredStatus('failed');\n\t      }\n\t    };\n\t\n\t    socket.onmessage = function(event) {\n\t      var replies;\n\t      try { replies = JSON.parse(event.data) } catch (error) {}\n\t\n\t      if (!replies) return;\n\t\n\t      replies = [].concat(replies);\n\t\n\t      for (var i = 0, n = replies.length; i < n; i++) {\n\t        if (replies[i].successful === undefined) continue;\n\t        self._pending.remove(replies[i]);\n\t      }\n\t      self._receive(replies);\n\t    };\n\t  },\n\t\n\t  close: function() {\n\t    if (!this._socket) return;\n\t    this._socket.close();\n\t  },\n\t\n\t  _createSocket: function() {\n\t    var url        = WebSocket.getSocketUrl(this.endpoint),\n\t        headers    = this._dispatcher.headers,\n\t        extensions = this._dispatcher.wsExtensions,\n\t        cookie     = this._getCookies(),\n\t        tls        = this._dispatcher.tls,\n\t        options    = {extensions: extensions, headers: headers, proxy: this._proxy, tls: tls};\n\t\n\t    if (cookie !== '') options.headers['Cookie'] = cookie;\n\t\n\t    return ws.create(url, [], options);\n\t  },\n\t\n\t  _ping: function() {\n\t    if (!this._socket || this._socket.readyState !== 1) return;\n\t    this._socket.send('[]');\n\t    this.addTimeout('ping', this._dispatcher.timeout / 2, this._ping, this);\n\t  }\n\t\n\t}), {\n\t  PROTOCOLS: {\n\t    'http:':  'ws:',\n\t    'https:': 'wss:'\n\t  },\n\t\n\t  create: function(dispatcher, endpoint) {\n\t    var sockets = dispatcher.transports.websocket = dispatcher.transports.websocket || {};\n\t    sockets[endpoint.href] = sockets[endpoint.href] || new this(dispatcher, endpoint);\n\t    return sockets[endpoint.href];\n\t  },\n\t\n\t  getSocketUrl: function(endpoint) {\n\t    endpoint = copyObject(endpoint);\n\t    endpoint.protocol = this.PROTOCOLS[endpoint.protocol];\n\t    return URI.stringify(endpoint);\n\t  },\n\t\n\t  isUsable: function(dispatcher, endpoint, callback, context) {\n\t    this.create(dispatcher, endpoint).isUsable(callback, context);\n\t  }\n\t});\n\t\n\textend(WebSocket.prototype, Deferrable);\n\t\n\tif (browser.Event && global.onbeforeunload !== undefined)\n\t  browser.Event.on(global, 'beforeunload', function() { WebSocket._unloaded = true });\n\t\n\tmodule.exports = WebSocket;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class = __webpack_require__(7);\n\t\n\tmodule.exports = Class({\n\t  initialize: function() {\n\t    this._index = {};\n\t  },\n\t\n\t  add: function(item) {\n\t    var key = (item.id !== undefined) ? item.id : item;\n\t    if (this._index.hasOwnProperty(key)) return false;\n\t    this._index[key] = item;\n\t    return true;\n\t  },\n\t\n\t  forEach: function(block, context) {\n\t    for (var key in this._index) {\n\t      if (this._index.hasOwnProperty(key))\n\t        block.call(context, this._index[key]);\n\t    }\n\t  },\n\t\n\t  isEmpty: function() {\n\t    for (var key in this._index) {\n\t      if (this._index.hasOwnProperty(key)) return false;\n\t    }\n\t    return true;\n\t  },\n\t\n\t  member: function(item) {\n\t    for (var key in this._index) {\n\t      if (this._index[key] === item) return true;\n\t    }\n\t    return false;\n\t  },\n\t\n\t  remove: function(item) {\n\t    var key = (item.id !== undefined) ? item.id : item;\n\t    var removed = this._index[key];\n\t    delete this._index[key];\n\t    return removed;\n\t  },\n\t\n\t  toArray: function() {\n\t    var array = [];\n\t    this.forEach(function(item) { array.push(item) });\n\t    return array;\n\t  }\n\t});\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar copyObject = function(object) {\n\t  var clone, i, key;\n\t  if (object instanceof Array) {\n\t    clone = [];\n\t    i = object.length;\n\t    while (i--) clone[i] = copyObject(object[i]);\n\t    return clone;\n\t  } else if (typeof object === 'object') {\n\t    clone = (object === null) ? null : {};\n\t    for (key in object) clone[key] = copyObject(object[key]);\n\t    return clone;\n\t  } else {\n\t    return object;\n\t  }\n\t};\n\t\n\tmodule.exports = copyObject;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar WS = global.MozWebSocket || global.WebSocket;\n\t\n\tmodule.exports = {\n\t  create: function(url, protocols, options) {\n\t    if (typeof WS !== 'function') return null;\n\t    return new WS(url);\n\t  }\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class      = __webpack_require__(7),\n\t    URI        = __webpack_require__(10),\n\t    copyObject = __webpack_require__(26),\n\t    extend     = __webpack_require__(8),\n\t    Deferrable = __webpack_require__(14),\n\t    Transport  = __webpack_require__(22),\n\t    XHR        = __webpack_require__(29);\n\t\n\tvar EventSource = extend(Class(Transport, {\n\t  initialize: function(dispatcher, endpoint) {\n\t    Transport.prototype.initialize.call(this, dispatcher, endpoint);\n\t    if (!global.EventSource) return this.setDeferredStatus('failed');\n\t\n\t    this._xhr = new XHR(dispatcher, endpoint);\n\t\n\t    endpoint = copyObject(endpoint);\n\t    endpoint.pathname += '/' + dispatcher.clientId;\n\t\n\t    var socket = new global.EventSource(URI.stringify(endpoint)),\n\t        self   = this;\n\t\n\t    socket.onopen = function() {\n\t      self._everConnected = true;\n\t      self.setDeferredStatus('succeeded');\n\t    };\n\t\n\t    socket.onerror = function() {\n\t      if (self._everConnected) {\n\t        self._handleError([]);\n\t      } else {\n\t        self.setDeferredStatus('failed');\n\t        socket.close();\n\t      }\n\t    };\n\t\n\t    socket.onmessage = function(event) {\n\t      var replies;\n\t      try { replies = JSON.parse(event.data) } catch (error) {}\n\t\n\t      if (replies)\n\t        self._receive(replies);\n\t      else\n\t        self._handleError([]);\n\t    };\n\t\n\t    this._socket = socket;\n\t  },\n\t\n\t  close: function() {\n\t    if (!this._socket) return;\n\t    this._socket.onopen = this._socket.onerror = this._socket.onmessage = null;\n\t    this._socket.close();\n\t    delete this._socket;\n\t  },\n\t\n\t  isUsable: function(callback, context) {\n\t    this.callback(function() { callback.call(context, true) });\n\t    this.errback(function() { callback.call(context, false) });\n\t  },\n\t\n\t  encode: function(messages) {\n\t    return this._xhr.encode(messages);\n\t  },\n\t\n\t  request: function(messages) {\n\t    return this._xhr.request(messages);\n\t  }\n\t\n\t}), {\n\t  isUsable: function(dispatcher, endpoint, callback, context) {\n\t    var id = dispatcher.clientId;\n\t    if (!id) return callback.call(context, false);\n\t\n\t    XHR.isUsable(dispatcher, endpoint, function(usable) {\n\t      if (!usable) return callback.call(context, false);\n\t      this.create(dispatcher, endpoint).isUsable(callback, context);\n\t    }, this);\n\t  },\n\t\n\t  create: function(dispatcher, endpoint) {\n\t    var sockets = dispatcher.transports.eventsource = dispatcher.transports.eventsource || {},\n\t        id      = dispatcher.clientId;\n\t\n\t    var url = copyObject(endpoint);\n\t    url.pathname += '/' + (id || '');\n\t    url = URI.stringify(url);\n\t\n\t    sockets[url] = sockets[url] || new this(dispatcher, endpoint);\n\t    return sockets[url];\n\t  }\n\t});\n\t\n\textend(EventSource.prototype, Deferrable);\n\t\n\tmodule.exports = EventSource;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class     = __webpack_require__(7),\n\t    URI       = __webpack_require__(10),\n\t    browser   = __webpack_require__(12),\n\t    extend    = __webpack_require__(8),\n\t    toJSON    = __webpack_require__(3),\n\t    Transport = __webpack_require__(22);\n\t\n\tvar XHR = extend(Class(Transport, {\n\t  encode: function(messages) {\n\t    return toJSON(messages);\n\t  },\n\t\n\t  request: function(messages) {\n\t    var href = this.endpoint.href,\n\t        self = this,\n\t        xhr;\n\t\n\t    // Prefer XMLHttpRequest over ActiveXObject if they both exist\n\t    if (global.XMLHttpRequest) {\n\t      xhr = new XMLHttpRequest();\n\t    } else if (global.ActiveXObject) {\n\t      xhr = new ActiveXObject('Microsoft.XMLHTTP');\n\t    } else {\n\t      return this._handleError(messages);\n\t    }\n\t\n\t    xhr.open('POST', href, true);\n\t    xhr.setRequestHeader('Content-Type', 'application/json');\n\t    xhr.setRequestHeader('Pragma', 'no-cache');\n\t    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\n\t    var headers = this._dispatcher.headers;\n\t    for (var key in headers) {\n\t      if (!headers.hasOwnProperty(key)) continue;\n\t      xhr.setRequestHeader(key, headers[key]);\n\t    }\n\t\n\t    var abort = function() { xhr.abort() };\n\t    if (global.onbeforeunload !== undefined)\n\t      browser.Event.on(global, 'beforeunload', abort);\n\t\n\t    xhr.onreadystatechange = function() {\n\t      if (!xhr || xhr.readyState !== 4) return;\n\t\n\t      var replies    = null,\n\t          status     = xhr.status,\n\t          text       = xhr.responseText,\n\t          successful = (status >= 200 && status < 300) || status === 304 || status === 1223;\n\t\n\t      if (global.onbeforeunload !== undefined)\n\t        browser.Event.detach(global, 'beforeunload', abort);\n\t\n\t      xhr.onreadystatechange = function() {};\n\t      xhr = null;\n\t\n\t      if (!successful) return self._handleError(messages);\n\t\n\t      try {\n\t        replies = JSON.parse(text);\n\t      } catch (error) {}\n\t\n\t      if (replies)\n\t        self._receive(replies);\n\t      else\n\t        self._handleError(messages);\n\t    };\n\t\n\t    xhr.send(this.encode(messages));\n\t    return xhr;\n\t  }\n\t}), {\n\t  isUsable: function(dispatcher, endpoint, callback, context) {\n\t    var usable = (navigator.product === 'ReactNative')\n\t              || URI.isSameOrigin(endpoint);\n\t\n\t    callback.call(context, usable);\n\t  }\n\t});\n\t\n\tmodule.exports = XHR;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class     = __webpack_require__(7),\n\t    Set       = __webpack_require__(25),\n\t    URI       = __webpack_require__(10),\n\t    extend    = __webpack_require__(8),\n\t    toJSON    = __webpack_require__(3),\n\t    Transport = __webpack_require__(22);\n\t\n\tvar CORS = extend(Class(Transport, {\n\t  encode: function(messages) {\n\t    return 'message=' + encodeURIComponent(toJSON(messages));\n\t  },\n\t\n\t  request: function(messages) {\n\t    var xhrClass = global.XDomainRequest ? XDomainRequest : XMLHttpRequest,\n\t        xhr      = new xhrClass(),\n\t        id       = ++CORS._id,\n\t        headers  = this._dispatcher.headers,\n\t        self     = this,\n\t        key;\n\t\n\t    xhr.open('POST', URI.stringify(this.endpoint), true);\n\t\n\t    if (xhr.setRequestHeader) {\n\t      xhr.setRequestHeader('Pragma', 'no-cache');\n\t      for (key in headers) {\n\t        if (!headers.hasOwnProperty(key)) continue;\n\t        xhr.setRequestHeader(key, headers[key]);\n\t      }\n\t    }\n\t\n\t    var cleanUp = function() {\n\t      if (!xhr) return false;\n\t      CORS._pending.remove(id);\n\t      xhr.onload = xhr.onerror = xhr.ontimeout = xhr.onprogress = null;\n\t      xhr = null;\n\t    };\n\t\n\t    xhr.onload = function() {\n\t      var replies;\n\t      try { replies = JSON.parse(xhr.responseText) } catch (error) {}\n\t\n\t      cleanUp();\n\t\n\t      if (replies)\n\t        self._receive(replies);\n\t      else\n\t        self._handleError(messages);\n\t    };\n\t\n\t    xhr.onerror = xhr.ontimeout = function() {\n\t      cleanUp();\n\t      self._handleError(messages);\n\t    };\n\t\n\t    xhr.onprogress = function() {};\n\t\n\t    if (xhrClass === global.XDomainRequest)\n\t      CORS._pending.add({id: id, xhr: xhr});\n\t\n\t    xhr.send(this.encode(messages));\n\t    return xhr;\n\t  }\n\t}), {\n\t  _id:      0,\n\t  _pending: new Set(),\n\t\n\t  isUsable: function(dispatcher, endpoint, callback, context) {\n\t    if (URI.isSameOrigin(endpoint))\n\t      return callback.call(context, false);\n\t\n\t    if (global.XDomainRequest)\n\t      return callback.call(context, endpoint.protocol === location.protocol);\n\t\n\t    if (global.XMLHttpRequest) {\n\t      var xhr = new XMLHttpRequest();\n\t      return callback.call(context, xhr.withCredentials !== undefined);\n\t    }\n\t    return callback.call(context, false);\n\t  }\n\t});\n\t\n\tmodule.exports = CORS;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar Class      = __webpack_require__(7),\n\t    URI        = __webpack_require__(10),\n\t    copyObject = __webpack_require__(26),\n\t    extend     = __webpack_require__(8),\n\t    toJSON     = __webpack_require__(3),\n\t    Transport  = __webpack_require__(22);\n\t\n\tvar JSONP = extend(Class(Transport, {\n\t encode: function(messages) {\n\t    var url = copyObject(this.endpoint);\n\t    url.query.message = toJSON(messages);\n\t    url.query.jsonp   = '__jsonp' + JSONP._cbCount + '__';\n\t    return URI.stringify(url);\n\t  },\n\t\n\t  request: function(messages) {\n\t    var head         = document.getElementsByTagName('head')[0],\n\t        script       = document.createElement('script'),\n\t        callbackName = JSONP.getCallbackName(),\n\t        endpoint     = copyObject(this.endpoint),\n\t        self         = this;\n\t\n\t    endpoint.query.message = toJSON(messages);\n\t    endpoint.query.jsonp   = callbackName;\n\t\n\t    var cleanup = function() {\n\t      if (!global[callbackName]) return false;\n\t      global[callbackName] = undefined;\n\t      try { delete global[callbackName] } catch (error) {}\n\t      script.parentNode.removeChild(script);\n\t    };\n\t\n\t    global[callbackName] = function(replies) {\n\t      cleanup();\n\t      self._receive(replies);\n\t    };\n\t\n\t    script.type = 'text/javascript';\n\t    script.src  = URI.stringify(endpoint);\n\t    head.appendChild(script);\n\t\n\t    script.onerror = function() {\n\t      cleanup();\n\t      self._handleError(messages);\n\t    };\n\t\n\t    return {abort: cleanup};\n\t  }\n\t}), {\n\t  _cbCount: 0,\n\t\n\t  getCallbackName: function() {\n\t    this._cbCount += 1;\n\t    return '__jsonp' + this._cbCount + '__';\n\t  },\n\t\n\t  isUsable: function(dispatcher, endpoint, callback, context) {\n\t    callback.call(context, true);\n\t  }\n\t});\n\t\n\tmodule.exports = JSONP;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend = __webpack_require__(8);\n\t\n\tvar Scheduler = function(message, options) {\n\t  this.message  = message;\n\t  this.options  = options;\n\t  this.attempts = 0;\n\t};\n\t\n\textend(Scheduler.prototype, {\n\t  getTimeout: function() {\n\t    return this.options.timeout;\n\t  },\n\t\n\t  getInterval: function() {\n\t    return this.options.interval;\n\t  },\n\t\n\t  isDeliverable: function() {\n\t    var attempts = this.options.attempts,\n\t        made     = this.attempts,\n\t        deadline = this.options.deadline,\n\t        now      = new Date().getTime();\n\t\n\t    if (attempts !== undefined && made >= attempts)\n\t      return false;\n\t\n\t    if (deadline !== undefined && now > deadline)\n\t      return false;\n\t\n\t    return true;\n\t  },\n\t\n\t  send: function() {\n\t    this.attempts += 1;\n\t  },\n\t\n\t  succeed: function() {},\n\t\n\t  fail: function() {},\n\t\n\t  abort: function() {}\n\t});\n\t\n\tmodule.exports = Scheduler;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class   = __webpack_require__(7),\n\t    Grammar = __webpack_require__(18);\n\t\n\tvar Error = Class({\n\t  initialize: function(code, params, message) {\n\t    this.code    = code;\n\t    this.params  = Array.prototype.slice.call(params);\n\t    this.message = message;\n\t  },\n\t\n\t  toString: function() {\n\t    return this.code + ':' +\n\t           this.params.join(',') + ':' +\n\t           this.message;\n\t  }\n\t});\n\t\n\tError.parse = function(message) {\n\t  message = message || '';\n\t  if (!Grammar.ERROR.test(message)) return new Error(null, [], message);\n\t\n\t  var parts   = message.split(':'),\n\t      code    = parseInt(parts[0]),\n\t      params  = parts[1].split(','),\n\t      message = parts[2];\n\t\n\t  return new Error(code, params, message);\n\t};\n\t\n\t// http://code.google.com/p/cometd/wiki/BayeuxCodes\n\tvar errors = {\n\t  versionMismatch:  [300, 'Version mismatch'],\n\t  conntypeMismatch: [301, 'Connection types not supported'],\n\t  extMismatch:      [302, 'Extension mismatch'],\n\t  badRequest:       [400, 'Bad request'],\n\t  clientUnknown:    [401, 'Unknown client'],\n\t  parameterMissing: [402, 'Missing required parameter'],\n\t  channelForbidden: [403, 'Forbidden channel'],\n\t  channelUnknown:   [404, 'Unknown channel'],\n\t  channelInvalid:   [405, 'Invalid channel'],\n\t  extUnknown:       [406, 'Unknown extension'],\n\t  publishFailed:    [407, 'Failed to publish'],\n\t  serverError:      [500, 'Internal server error']\n\t};\n\t\n\tfor (var name in errors)\n\t  (function(name) {\n\t    Error[name] = function() {\n\t      return new Error(errors[name][0], arguments, errors[name][1]).toString();\n\t    };\n\t  })(name);\n\t\n\tmodule.exports = Error;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar extend  = __webpack_require__(8),\n\t    Logging = __webpack_require__(2);\n\t\n\tvar Extensible = {\n\t  addExtension: function(extension) {\n\t    this._extensions = this._extensions || [];\n\t    this._extensions.push(extension);\n\t    if (extension.added) extension.added(this);\n\t  },\n\t\n\t  removeExtension: function(extension) {\n\t    if (!this._extensions) return;\n\t    var i = this._extensions.length;\n\t    while (i--) {\n\t      if (this._extensions[i] !== extension) continue;\n\t      this._extensions.splice(i,1);\n\t      if (extension.removed) extension.removed(this);\n\t    }\n\t  },\n\t\n\t  pipeThroughExtensions: function(stage, message, request, callback, context) {\n\t    this.debug('Passing through ? extensions: ?', stage, message);\n\t\n\t    if (!this._extensions) return callback.call(context, message);\n\t    var extensions = this._extensions.slice();\n\t\n\t    var pipe = function(message) {\n\t      if (!message) return callback.call(context, message);\n\t\n\t      var extension = extensions.shift();\n\t      if (!extension) return callback.call(context, message);\n\t\n\t      var fn = extension[stage];\n\t      if (!fn) return pipe(message);\n\t\n\t      if (fn.length >= 3) extension[stage](message, request, pipe);\n\t      else                extension[stage](message, pipe);\n\t    };\n\t    pipe(message);\n\t  }\n\t};\n\t\n\textend(Extensible, Logging);\n\t\n\tmodule.exports = Extensible;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class      = __webpack_require__(7),\n\t    Deferrable = __webpack_require__(14);\n\t\n\tmodule.exports = Class(Deferrable);\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Class      = __webpack_require__(7),\n\t    extend     = __webpack_require__(8),\n\t    Deferrable = __webpack_require__(14);\n\t\n\tvar Subscription = Class({\n\t  initialize: function(client, channels, callback, context) {\n\t    this._client    = client;\n\t    this._channels  = channels;\n\t    this._callback  = callback;\n\t    this._context   = context;\n\t    this._cancelled = false;\n\t  },\n\t\n\t  withChannel: function(callback, context) {\n\t    this._withChannel = [callback, context];\n\t    return this;\n\t  },\n\t\n\t  apply: function(context, args) {\n\t    var message = args[0];\n\t\n\t    if (this._callback)\n\t      this._callback.call(this._context, message.data);\n\t\n\t    if (this._withChannel)\n\t      this._withChannel[0].call(this._withChannel[1], message.channel, message.data);\n\t  },\n\t\n\t  cancel: function() {\n\t    if (this._cancelled) return;\n\t    this._client.unsubscribe(this._channels, this);\n\t    this._cancelled = true;\n\t  },\n\t\n\t  unsubscribe: function() {\n\t    this.cancel();\n\t  }\n\t});\n\t\n\textend(Subscription.prototype, Deferrable);\n\t\n\tmodule.exports = Subscription;\n\n\n/***/ }\n/******/ ]);\n//# sourceMappingURL=faye-browser.js.map"}